/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the ViewIndexSizes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewIndexSizes{}

// ViewIndexSizes struct for ViewIndexSizes
type ViewIndexSizes struct {
	// The size of live data inside the view, in bytes
	Active *int32 `json:"active,omitempty"`
	// Size in bytes of the view as stored on disk
	Disk *int32 `json:"disk,omitempty"`
	// The uncompressed size of view contents in bytes
	External *int32 `json:"external,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ViewIndexSizes ViewIndexSizes

// NewViewIndexSizes instantiates a new ViewIndexSizes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewIndexSizes() *ViewIndexSizes {
	this := ViewIndexSizes{}
	return &this
}

// NewViewIndexSizesWithDefaults instantiates a new ViewIndexSizes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewIndexSizesWithDefaults() *ViewIndexSizes {
	this := ViewIndexSizes{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ViewIndexSizes) GetActive() int32 {
	if o == nil || IsNil(o.Active) {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewIndexSizes) GetActiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ViewIndexSizes) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *ViewIndexSizes) SetActive(v int32) {
	o.Active = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *ViewIndexSizes) GetDisk() int32 {
	if o == nil || IsNil(o.Disk) {
		var ret int32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewIndexSizes) GetDiskOk() (*int32, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *ViewIndexSizes) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given int32 and assigns it to the Disk field.
func (o *ViewIndexSizes) SetDisk(v int32) {
	o.Disk = &v
}

// GetExternal returns the External field value if set, zero value otherwise.
func (o *ViewIndexSizes) GetExternal() int32 {
	if o == nil || IsNil(o.External) {
		var ret int32
		return ret
	}
	return *o.External
}

// GetExternalOk returns a tuple with the External field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewIndexSizes) GetExternalOk() (*int32, bool) {
	if o == nil || IsNil(o.External) {
		return nil, false
	}
	return o.External, true
}

// HasExternal returns a boolean if a field has been set.
func (o *ViewIndexSizes) HasExternal() bool {
	if o != nil && !IsNil(o.External) {
		return true
	}

	return false
}

// SetExternal gets a reference to the given int32 and assigns it to the External field.
func (o *ViewIndexSizes) SetExternal(v int32) {
	o.External = &v
}

func (o ViewIndexSizes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewIndexSizes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.External) {
		toSerialize["external"] = o.External
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ViewIndexSizes) UnmarshalJSON(bytes []byte) (err error) {
	varViewIndexSizes := _ViewIndexSizes{}

	if err = json.Unmarshal(bytes, &varViewIndexSizes); err == nil {
		*o = ViewIndexSizes(varViewIndexSizes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "disk")
		delete(additionalProperties, "external")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableViewIndexSizes struct {
	value *ViewIndexSizes
	isSet bool
}

func (v NullableViewIndexSizes) Get() *ViewIndexSizes {
	return v.value
}

func (v *NullableViewIndexSizes) Set(val *ViewIndexSizes) {
	v.value = val
	v.isSet = true
}

func (v NullableViewIndexSizes) IsSet() bool {
	return v.isSet
}

func (v *NullableViewIndexSizes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewIndexSizes(val *ViewIndexSizes) *NullableViewIndexSizes {
	return &NullableViewIndexSizes{value: val, isSet: true}
}

func (v NullableViewIndexSizes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewIndexSizes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


