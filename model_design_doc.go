/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the DesignDoc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DesignDoc{}

// DesignDoc struct for DesignDoc
type DesignDoc struct {
	// Defines Query Server to process design document functions
	Language *string `json:"language,omitempty"`
	// Viewâ€™s default options
	Options map[string]interface{} `json:"options,omitempty"`
	// Filter functions definition
	Filters map[string]interface{} `json:"filters,omitempty"`
	// Update functions definition
	Updates map[string]interface{} `json:"updates,omitempty"`
	// Validate document update function source
	ValidateDocUpdate *string `json:"validate_doc_update,omitempty"`
	// View functions definition.
	Views map[string]interface{} `json:"views,omitempty"`
	Indexes map[string]interface{} `json:"indexes,omitempty"`
	// Indicates whether to automatically build indexes defined in this design document. Default is true.
	Autoupdate *bool `json:"autoupdate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DesignDoc DesignDoc

// NewDesignDoc instantiates a new DesignDoc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesignDoc() *DesignDoc {
	this := DesignDoc{}
	return &this
}

// NewDesignDocWithDefaults instantiates a new DesignDoc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesignDocWithDefaults() *DesignDoc {
	this := DesignDoc{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DesignDoc) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesignDoc) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DesignDoc) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DesignDoc) SetLanguage(v string) {
	o.Language = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DesignDoc) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesignDoc) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DesignDoc) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *DesignDoc) SetOptions(v map[string]interface{}) {
	o.Options = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *DesignDoc) GetFilters() map[string]interface{} {
	if o == nil || IsNil(o.Filters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesignDoc) GetFiltersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Filters) {
		return map[string]interface{}{}, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DesignDoc) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string]interface{} and assigns it to the Filters field.
func (o *DesignDoc) SetFilters(v map[string]interface{}) {
	o.Filters = v
}

// GetUpdates returns the Updates field value if set, zero value otherwise.
func (o *DesignDoc) GetUpdates() map[string]interface{} {
	if o == nil || IsNil(o.Updates) {
		var ret map[string]interface{}
		return ret
	}
	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesignDoc) GetUpdatesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Updates) {
		return map[string]interface{}{}, false
	}
	return o.Updates, true
}

// HasUpdates returns a boolean if a field has been set.
func (o *DesignDoc) HasUpdates() bool {
	if o != nil && !IsNil(o.Updates) {
		return true
	}

	return false
}

// SetUpdates gets a reference to the given map[string]interface{} and assigns it to the Updates field.
func (o *DesignDoc) SetUpdates(v map[string]interface{}) {
	o.Updates = v
}

// GetValidateDocUpdate returns the ValidateDocUpdate field value if set, zero value otherwise.
func (o *DesignDoc) GetValidateDocUpdate() string {
	if o == nil || IsNil(o.ValidateDocUpdate) {
		var ret string
		return ret
	}
	return *o.ValidateDocUpdate
}

// GetValidateDocUpdateOk returns a tuple with the ValidateDocUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesignDoc) GetValidateDocUpdateOk() (*string, bool) {
	if o == nil || IsNil(o.ValidateDocUpdate) {
		return nil, false
	}
	return o.ValidateDocUpdate, true
}

// HasValidateDocUpdate returns a boolean if a field has been set.
func (o *DesignDoc) HasValidateDocUpdate() bool {
	if o != nil && !IsNil(o.ValidateDocUpdate) {
		return true
	}

	return false
}

// SetValidateDocUpdate gets a reference to the given string and assigns it to the ValidateDocUpdate field.
func (o *DesignDoc) SetValidateDocUpdate(v string) {
	o.ValidateDocUpdate = &v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *DesignDoc) GetViews() map[string]interface{} {
	if o == nil || IsNil(o.Views) {
		var ret map[string]interface{}
		return ret
	}
	return o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesignDoc) GetViewsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Views) {
		return map[string]interface{}{}, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *DesignDoc) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given map[string]interface{} and assigns it to the Views field.
func (o *DesignDoc) SetViews(v map[string]interface{}) {
	o.Views = v
}

// GetIndexes returns the Indexes field value if set, zero value otherwise.
func (o *DesignDoc) GetIndexes() map[string]interface{} {
	if o == nil || IsNil(o.Indexes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Indexes
}

// GetIndexesOk returns a tuple with the Indexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesignDoc) GetIndexesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Indexes) {
		return map[string]interface{}{}, false
	}
	return o.Indexes, true
}

// HasIndexes returns a boolean if a field has been set.
func (o *DesignDoc) HasIndexes() bool {
	if o != nil && !IsNil(o.Indexes) {
		return true
	}

	return false
}

// SetIndexes gets a reference to the given map[string]interface{} and assigns it to the Indexes field.
func (o *DesignDoc) SetIndexes(v map[string]interface{}) {
	o.Indexes = v
}

// GetAutoupdate returns the Autoupdate field value if set, zero value otherwise.
func (o *DesignDoc) GetAutoupdate() bool {
	if o == nil || IsNil(o.Autoupdate) {
		var ret bool
		return ret
	}
	return *o.Autoupdate
}

// GetAutoupdateOk returns a tuple with the Autoupdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesignDoc) GetAutoupdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Autoupdate) {
		return nil, false
	}
	return o.Autoupdate, true
}

// HasAutoupdate returns a boolean if a field has been set.
func (o *DesignDoc) HasAutoupdate() bool {
	if o != nil && !IsNil(o.Autoupdate) {
		return true
	}

	return false
}

// SetAutoupdate gets a reference to the given bool and assigns it to the Autoupdate field.
func (o *DesignDoc) SetAutoupdate(v bool) {
	o.Autoupdate = &v
}

func (o DesignDoc) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DesignDoc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Updates) {
		toSerialize["updates"] = o.Updates
	}
	if !IsNil(o.ValidateDocUpdate) {
		toSerialize["validate_doc_update"] = o.ValidateDocUpdate
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}
	if !IsNil(o.Indexes) {
		toSerialize["indexes"] = o.Indexes
	}
	if !IsNil(o.Autoupdate) {
		toSerialize["autoupdate"] = o.Autoupdate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DesignDoc) UnmarshalJSON(bytes []byte) (err error) {
	varDesignDoc := _DesignDoc{}

	if err = json.Unmarshal(bytes, &varDesignDoc); err == nil {
		*o = DesignDoc(varDesignDoc)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "language")
		delete(additionalProperties, "options")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "updates")
		delete(additionalProperties, "validate_doc_update")
		delete(additionalProperties, "views")
		delete(additionalProperties, "indexes")
		delete(additionalProperties, "autoupdate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDesignDoc struct {
	value *DesignDoc
	isSet bool
}

func (v NullableDesignDoc) Get() *DesignDoc {
	return v.value
}

func (v *NullableDesignDoc) Set(val *DesignDoc) {
	v.value = val
	v.isSet = true
}

func (v NullableDesignDoc) IsSet() bool {
	return v.isSet
}

func (v *NullableDesignDoc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesignDoc(val *DesignDoc) *NullableDesignDoc {
	return &NullableDesignDoc{value: val, isSet: true}
}

func (v NullableDesignDoc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesignDoc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


