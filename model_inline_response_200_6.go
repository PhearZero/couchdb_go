/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the InlineResponse2006 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineResponse2006{}

// InlineResponse2006 struct for InlineResponse2006
type InlineResponse2006 struct {
	Docs []map[string]interface{} `json:"docs,omitempty"`
	ExecutionStats *InlineResponse2006ExecutionStats `json:"execution_stats,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InlineResponse2006 InlineResponse2006

// NewInlineResponse2006 instantiates a new InlineResponse2006 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2006() *InlineResponse2006 {
	this := InlineResponse2006{}
	return &this
}

// NewInlineResponse2006WithDefaults instantiates a new InlineResponse2006 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2006WithDefaults() *InlineResponse2006 {
	this := InlineResponse2006{}
	return &this
}

// GetDocs returns the Docs field value if set, zero value otherwise.
func (o *InlineResponse2006) GetDocs() []map[string]interface{} {
	if o == nil || IsNil(o.Docs) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Docs
}

// GetDocsOk returns a tuple with the Docs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetDocsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Docs) {
		return nil, false
	}
	return o.Docs, true
}

// HasDocs returns a boolean if a field has been set.
func (o *InlineResponse2006) HasDocs() bool {
	if o != nil && !IsNil(o.Docs) {
		return true
	}

	return false
}

// SetDocs gets a reference to the given []map[string]interface{} and assigns it to the Docs field.
func (o *InlineResponse2006) SetDocs(v []map[string]interface{}) {
	o.Docs = v
}

// GetExecutionStats returns the ExecutionStats field value if set, zero value otherwise.
func (o *InlineResponse2006) GetExecutionStats() InlineResponse2006ExecutionStats {
	if o == nil || IsNil(o.ExecutionStats) {
		var ret InlineResponse2006ExecutionStats
		return ret
	}
	return *o.ExecutionStats
}

// GetExecutionStatsOk returns a tuple with the ExecutionStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetExecutionStatsOk() (*InlineResponse2006ExecutionStats, bool) {
	if o == nil || IsNil(o.ExecutionStats) {
		return nil, false
	}
	return o.ExecutionStats, true
}

// HasExecutionStats returns a boolean if a field has been set.
func (o *InlineResponse2006) HasExecutionStats() bool {
	if o != nil && !IsNil(o.ExecutionStats) {
		return true
	}

	return false
}

// SetExecutionStats gets a reference to the given InlineResponse2006ExecutionStats and assigns it to the ExecutionStats field.
func (o *InlineResponse2006) SetExecutionStats(v InlineResponse2006ExecutionStats) {
	o.ExecutionStats = &v
}

func (o InlineResponse2006) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineResponse2006) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Docs) {
		toSerialize["docs"] = o.Docs
	}
	if !IsNil(o.ExecutionStats) {
		toSerialize["execution_stats"] = o.ExecutionStats
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InlineResponse2006) UnmarshalJSON(bytes []byte) (err error) {
	varInlineResponse2006 := _InlineResponse2006{}

	if err = json.Unmarshal(bytes, &varInlineResponse2006); err == nil {
		*o = InlineResponse2006(varInlineResponse2006)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "docs")
		delete(additionalProperties, "execution_stats")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInlineResponse2006 struct {
	value *InlineResponse2006
	isSet bool
}

func (v NullableInlineResponse2006) Get() *InlineResponse2006 {
	return v.value
}

func (v *NullableInlineResponse2006) Set(val *InlineResponse2006) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2006) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2006) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2006(val *InlineResponse2006) *NullableInlineResponse2006 {
	return &NullableInlineResponse2006{value: val, isSet: true}
}

func (v NullableInlineResponse2006) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2006) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


