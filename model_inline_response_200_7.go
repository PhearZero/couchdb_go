/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the InlineResponse2007 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineResponse2007{}

// InlineResponse2007 struct for InlineResponse2007
type InlineResponse2007 struct {
	Name *string `json:"name,omitempty"`
	ViewIndex *ViewIndex `json:"view_index,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InlineResponse2007 InlineResponse2007

// NewInlineResponse2007 instantiates a new InlineResponse2007 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2007() *InlineResponse2007 {
	this := InlineResponse2007{}
	return &this
}

// NewInlineResponse2007WithDefaults instantiates a new InlineResponse2007 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2007WithDefaults() *InlineResponse2007 {
	this := InlineResponse2007{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse2007) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2007) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse2007) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse2007) SetName(v string) {
	o.Name = &v
}

// GetViewIndex returns the ViewIndex field value if set, zero value otherwise.
func (o *InlineResponse2007) GetViewIndex() ViewIndex {
	if o == nil || IsNil(o.ViewIndex) {
		var ret ViewIndex
		return ret
	}
	return *o.ViewIndex
}

// GetViewIndexOk returns a tuple with the ViewIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2007) GetViewIndexOk() (*ViewIndex, bool) {
	if o == nil || IsNil(o.ViewIndex) {
		return nil, false
	}
	return o.ViewIndex, true
}

// HasViewIndex returns a boolean if a field has been set.
func (o *InlineResponse2007) HasViewIndex() bool {
	if o != nil && !IsNil(o.ViewIndex) {
		return true
	}

	return false
}

// SetViewIndex gets a reference to the given ViewIndex and assigns it to the ViewIndex field.
func (o *InlineResponse2007) SetViewIndex(v ViewIndex) {
	o.ViewIndex = &v
}

func (o InlineResponse2007) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineResponse2007) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ViewIndex) {
		toSerialize["view_index"] = o.ViewIndex
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InlineResponse2007) UnmarshalJSON(bytes []byte) (err error) {
	varInlineResponse2007 := _InlineResponse2007{}

	if err = json.Unmarshal(bytes, &varInlineResponse2007); err == nil {
		*o = InlineResponse2007(varInlineResponse2007)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "view_index")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInlineResponse2007 struct {
	value *InlineResponse2007
	isSet bool
}

func (v NullableInlineResponse2007) Get() *InlineResponse2007 {
	return v.value
}

func (v *NullableInlineResponse2007) Set(val *InlineResponse2007) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2007) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2007) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2007(val *InlineResponse2007) *NullableInlineResponse2007 {
	return &NullableInlineResponse2007{value: val, isSet: true}
}

func (v NullableInlineResponse2007) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2007) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


