/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Cluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cluster{}

// Cluster struct for Cluster
type Cluster struct {
	Action *string `json:"action,omitempty"`
	// The IP address to which to bind the current node. The special value 0.0.0.0 may be specified to bind to all interfaces on the host. (enable_cluster and enable_single_node only)
	BindAddress *string `json:"bind_address,omitempty"`
	// The username of the server-level administrator to create. (enable_cluster and enable_single_node only), or the remote server’s administrator username (add_node)
	Username *string `json:"username,omitempty"`
	// The password for the server-level administrator to create. (enable_cluster and enable_single_node only), or the remote server’s administrator username (add_node)
	Password *string `json:"password,omitempty"`
	// The TCP port to which to bind this node (enable_cluster and enable_single_node only) or the TCP port to which to bind a remote node (add_node only).
	Port *int32 `json:"port,omitempty"`
	// The total number of nodes to be joined into the cluster, including this one. Used to determine the value of the cluster’s n, up to a maximum of 3. (enable_cluster only)
	NodeCount *int32 `json:"node_count,omitempty"`
	// The IP address of the remote node to setup as part of this cluster’s list of nodes. (enable_cluster only)
	RemoteNode *string `json:"remote_node,omitempty"`
	// The username of the server-level administrator authorized on the remote node. (enable_cluster only)
	RemoteCurrentUser *string `json:"remote_current_user,omitempty"`
	// he password of the server-level administrator authorized on the remote node. (enable_cluster only)
	RemoteCurrentPassword *string `json:"remote_current_password,omitempty"`
	// The remote node IP of the node to add to the cluster. (add_node only)
	Host *string `json:"host,omitempty"`
	// List of system databases to ensure exist on the node/cluster. Defaults to [\"_users\",\"_replicator\"].
	EnsureDbsExist []string `json:"ensure_dbs_exist,omitempty"`
}

// NewCluster instantiates a new Cluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCluster() *Cluster {
	this := Cluster{}
	return &this
}

// NewClusterWithDefaults instantiates a new Cluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterWithDefaults() *Cluster {
	this := Cluster{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Cluster) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Cluster) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *Cluster) SetAction(v string) {
	o.Action = &v
}

// GetBindAddress returns the BindAddress field value if set, zero value otherwise.
func (o *Cluster) GetBindAddress() string {
	if o == nil || IsNil(o.BindAddress) {
		var ret string
		return ret
	}
	return *o.BindAddress
}

// GetBindAddressOk returns a tuple with the BindAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetBindAddressOk() (*string, bool) {
	if o == nil || IsNil(o.BindAddress) {
		return nil, false
	}
	return o.BindAddress, true
}

// HasBindAddress returns a boolean if a field has been set.
func (o *Cluster) HasBindAddress() bool {
	if o != nil && !IsNil(o.BindAddress) {
		return true
	}

	return false
}

// SetBindAddress gets a reference to the given string and assigns it to the BindAddress field.
func (o *Cluster) SetBindAddress(v string) {
	o.BindAddress = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Cluster) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Cluster) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Cluster) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Cluster) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Cluster) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Cluster) SetPassword(v string) {
	o.Password = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Cluster) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Cluster) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *Cluster) SetPort(v int32) {
	o.Port = &v
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *Cluster) GetNodeCount() int32 {
	if o == nil || IsNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCount) {
		return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *Cluster) HasNodeCount() bool {
	if o != nil && !IsNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *Cluster) SetNodeCount(v int32) {
	o.NodeCount = &v
}

// GetRemoteNode returns the RemoteNode field value if set, zero value otherwise.
func (o *Cluster) GetRemoteNode() string {
	if o == nil || IsNil(o.RemoteNode) {
		var ret string
		return ret
	}
	return *o.RemoteNode
}

// GetRemoteNodeOk returns a tuple with the RemoteNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetRemoteNodeOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteNode) {
		return nil, false
	}
	return o.RemoteNode, true
}

// HasRemoteNode returns a boolean if a field has been set.
func (o *Cluster) HasRemoteNode() bool {
	if o != nil && !IsNil(o.RemoteNode) {
		return true
	}

	return false
}

// SetRemoteNode gets a reference to the given string and assigns it to the RemoteNode field.
func (o *Cluster) SetRemoteNode(v string) {
	o.RemoteNode = &v
}

// GetRemoteCurrentUser returns the RemoteCurrentUser field value if set, zero value otherwise.
func (o *Cluster) GetRemoteCurrentUser() string {
	if o == nil || IsNil(o.RemoteCurrentUser) {
		var ret string
		return ret
	}
	return *o.RemoteCurrentUser
}

// GetRemoteCurrentUserOk returns a tuple with the RemoteCurrentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetRemoteCurrentUserOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteCurrentUser) {
		return nil, false
	}
	return o.RemoteCurrentUser, true
}

// HasRemoteCurrentUser returns a boolean if a field has been set.
func (o *Cluster) HasRemoteCurrentUser() bool {
	if o != nil && !IsNil(o.RemoteCurrentUser) {
		return true
	}

	return false
}

// SetRemoteCurrentUser gets a reference to the given string and assigns it to the RemoteCurrentUser field.
func (o *Cluster) SetRemoteCurrentUser(v string) {
	o.RemoteCurrentUser = &v
}

// GetRemoteCurrentPassword returns the RemoteCurrentPassword field value if set, zero value otherwise.
func (o *Cluster) GetRemoteCurrentPassword() string {
	if o == nil || IsNil(o.RemoteCurrentPassword) {
		var ret string
		return ret
	}
	return *o.RemoteCurrentPassword
}

// GetRemoteCurrentPasswordOk returns a tuple with the RemoteCurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetRemoteCurrentPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteCurrentPassword) {
		return nil, false
	}
	return o.RemoteCurrentPassword, true
}

// HasRemoteCurrentPassword returns a boolean if a field has been set.
func (o *Cluster) HasRemoteCurrentPassword() bool {
	if o != nil && !IsNil(o.RemoteCurrentPassword) {
		return true
	}

	return false
}

// SetRemoteCurrentPassword gets a reference to the given string and assigns it to the RemoteCurrentPassword field.
func (o *Cluster) SetRemoteCurrentPassword(v string) {
	o.RemoteCurrentPassword = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *Cluster) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *Cluster) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *Cluster) SetHost(v string) {
	o.Host = &v
}

// GetEnsureDbsExist returns the EnsureDbsExist field value if set, zero value otherwise.
func (o *Cluster) GetEnsureDbsExist() []string {
	if o == nil || IsNil(o.EnsureDbsExist) {
		var ret []string
		return ret
	}
	return o.EnsureDbsExist
}

// GetEnsureDbsExistOk returns a tuple with the EnsureDbsExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetEnsureDbsExistOk() ([]string, bool) {
	if o == nil || IsNil(o.EnsureDbsExist) {
		return nil, false
	}
	return o.EnsureDbsExist, true
}

// HasEnsureDbsExist returns a boolean if a field has been set.
func (o *Cluster) HasEnsureDbsExist() bool {
	if o != nil && !IsNil(o.EnsureDbsExist) {
		return true
	}

	return false
}

// SetEnsureDbsExist gets a reference to the given []string and assigns it to the EnsureDbsExist field.
func (o *Cluster) SetEnsureDbsExist(v []string) {
	o.EnsureDbsExist = v
}

func (o Cluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.BindAddress) {
		toSerialize["bind_address"] = o.BindAddress
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.NodeCount) {
		toSerialize["node_count"] = o.NodeCount
	}
	if !IsNil(o.RemoteNode) {
		toSerialize["remote_node"] = o.RemoteNode
	}
	if !IsNil(o.RemoteCurrentUser) {
		toSerialize["remote_current_user"] = o.RemoteCurrentUser
	}
	if !IsNil(o.RemoteCurrentPassword) {
		toSerialize["remote_current_password"] = o.RemoteCurrentPassword
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.EnsureDbsExist) {
		toSerialize["ensure_dbs_exist"] = o.EnsureDbsExist
	}
	return toSerialize, nil
}

type NullableCluster struct {
	value *Cluster
	isSet bool
}

func (v NullableCluster) Get() *Cluster {
	return v.value
}

func (v *NullableCluster) Set(val *Cluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCluster(val *Cluster) *NullableCluster {
	return &NullableCluster{value: val, isSet: true}
}

func (v NullableCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


