/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Row type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Row{}

// Row struct for Row
type Row struct {
	// Document ID
	Id *string `json:"id,omitempty"`
	Key *string `json:"key,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
	Doc map[string]interface{} `json:"doc,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Row Row

// NewRow instantiates a new Row object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRow() *Row {
	this := Row{}
	return &this
}

// NewRowWithDefaults instantiates a new Row object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRowWithDefaults() *Row {
	this := Row{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Row) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Row) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Row) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Row) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Row) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Row) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Row) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Row) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Row) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Row) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Row) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *Row) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetDoc returns the Doc field value if set, zero value otherwise.
func (o *Row) GetDoc() map[string]interface{} {
	if o == nil || IsNil(o.Doc) {
		var ret map[string]interface{}
		return ret
	}
	return o.Doc
}

// GetDocOk returns a tuple with the Doc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Row) GetDocOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Doc) {
		return map[string]interface{}{}, false
	}
	return o.Doc, true
}

// HasDoc returns a boolean if a field has been set.
func (o *Row) HasDoc() bool {
	if o != nil && !IsNil(o.Doc) {
		return true
	}

	return false
}

// SetDoc gets a reference to the given map[string]interface{} and assigns it to the Doc field.
func (o *Row) SetDoc(v map[string]interface{}) {
	o.Doc = v
}

func (o Row) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Row) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Doc) {
		toSerialize["doc"] = o.Doc
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Row) UnmarshalJSON(bytes []byte) (err error) {
	varRow := _Row{}

	if err = json.Unmarshal(bytes, &varRow); err == nil {
		*o = Row(varRow)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		delete(additionalProperties, "doc")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRow struct {
	value *Row
	isSet bool
}

func (v NullableRow) Get() *Row {
	return v.value
}

func (v *NullableRow) Set(val *Row) {
	v.value = val
	v.isSet = true
}

func (v NullableRow) IsSet() bool {
	return v.isSet
}

func (v *NullableRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRow(val *Row) *NullableRow {
	return &NullableRow{value: val, isSet: true}
}

func (v NullableRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


