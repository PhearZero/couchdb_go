/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the PartitionSizes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionSizes{}

// PartitionSizes struct for PartitionSizes
type PartitionSizes struct {
	Active *int32 `json:"active,omitempty"`
	External *int32 `json:"external,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PartitionSizes PartitionSizes

// NewPartitionSizes instantiates a new PartitionSizes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionSizes() *PartitionSizes {
	this := PartitionSizes{}
	return &this
}

// NewPartitionSizesWithDefaults instantiates a new PartitionSizes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionSizesWithDefaults() *PartitionSizes {
	this := PartitionSizes{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PartitionSizes) GetActive() int32 {
	if o == nil || IsNil(o.Active) {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionSizes) GetActiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PartitionSizes) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *PartitionSizes) SetActive(v int32) {
	o.Active = &v
}

// GetExternal returns the External field value if set, zero value otherwise.
func (o *PartitionSizes) GetExternal() int32 {
	if o == nil || IsNil(o.External) {
		var ret int32
		return ret
	}
	return *o.External
}

// GetExternalOk returns a tuple with the External field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionSizes) GetExternalOk() (*int32, bool) {
	if o == nil || IsNil(o.External) {
		return nil, false
	}
	return o.External, true
}

// HasExternal returns a boolean if a field has been set.
func (o *PartitionSizes) HasExternal() bool {
	if o != nil && !IsNil(o.External) {
		return true
	}

	return false
}

// SetExternal gets a reference to the given int32 and assigns it to the External field.
func (o *PartitionSizes) SetExternal(v int32) {
	o.External = &v
}

func (o PartitionSizes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionSizes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.External) {
		toSerialize["external"] = o.External
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PartitionSizes) UnmarshalJSON(bytes []byte) (err error) {
	varPartitionSizes := _PartitionSizes{}

	if err = json.Unmarshal(bytes, &varPartitionSizes); err == nil {
		*o = PartitionSizes(varPartitionSizes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "external")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePartitionSizes struct {
	value *PartitionSizes
	isSet bool
}

func (v NullablePartitionSizes) Get() *PartitionSizes {
	return v.value
}

func (v *NullablePartitionSizes) Set(val *PartitionSizes) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionSizes) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionSizes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionSizes(val *PartitionSizes) *NullablePartitionSizes {
	return &NullablePartitionSizes{value: val, isSet: true}
}

func (v NullablePartitionSizes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionSizes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


