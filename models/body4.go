// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Body4 body 4
//
// swagger:model body_4
type Body4 struct {

	// admins
	Admins *Admins `json:"admins,omitempty"`

	// members
	Members *Members `json:"members,omitempty"`
}

// Validate validates this body 4
func (m *Body4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Body4) validateAdmins(formats strfmt.Registry) error {
	if swag.IsZero(m.Admins) { // not required
		return nil
	}

	if m.Admins != nil {
		if err := m.Admins.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admins")
			}
			return err
		}
	}

	return nil
}

func (m *Body4) validateMembers(formats strfmt.Registry) error {
	if swag.IsZero(m.Members) { // not required
		return nil
	}

	if m.Members != nil {
		if err := m.Members.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("members")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this body 4 based on the context it is used
func (m *Body4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdmins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Body4) contextValidateAdmins(ctx context.Context, formats strfmt.Registry) error {

	if m.Admins != nil {
		if err := m.Admins.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admins")
			}
			return err
		}
	}

	return nil
}

func (m *Body4) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	if m.Members != nil {
		if err := m.Members.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("members")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Body4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Body4) UnmarshalBinary(b []byte) error {
	var res Body4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
