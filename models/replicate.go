// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Replicate replicate
//
// swagger:model Replicate
type Replicate struct {

	// Cancels the replication
	Cancel bool `json:"cancel,omitempty"`

	// Configure the replication to be continuous
	Continuous bool `json:"continuous,omitempty"`

	// Creates the target database. Required administrator’s privileges on target server.
	CreateTarget bool `json:"create_target,omitempty"`

	// Array of document IDs to be synchronized
	DocIds []string `json:"doc_ids"`

	// The name of a filter function.
	Filter string `json:"filter,omitempty"`

	// Fully qualified source database URL or an object which contains the full URL of the source database with additional parameters like headers. Eg: ‘http://example.com/source_db_name’
	//
	Source string `json:"source,omitempty"`

	// Address of a proxy server through which replication from the source should occur (protocol can be “http” or “socks5”)
	SourceProxy string `json:"source_proxy,omitempty"`

	// Fully qualified target database URL or an object which contains the full URL of the target database with additional parameters like headers. Eg: ‘http://example.com/target_db_name’
	//
	Target string `json:"target,omitempty"`

	// Address of a proxy server through which replication to the target should occur (protocol can be “http” or “socks5”)
	TargetProxy string `json:"target_proxy,omitempty"`
}

// Validate validates this replicate
func (m *Replicate) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Replicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Replicate) UnmarshalBinary(b []byte) error {
	var res Replicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
