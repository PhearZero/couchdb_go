/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the OK type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OK{}

// OK struct for OK
type OK struct {
	// Operation status
	Ok *bool `json:"ok,omitempty"`
}

// NewOK instantiates a new OK object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOK() *OK {
	this := OK{}
	return &this
}

// NewOKWithDefaults instantiates a new OK object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOKWithDefaults() *OK {
	this := OK{}
	return &this
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *OK) GetOk() bool {
	if o == nil || IsNil(o.Ok) {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OK) GetOkOk() (*bool, bool) {
	if o == nil || IsNil(o.Ok) {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *OK) HasOk() bool {
	if o != nil && !IsNil(o.Ok) {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *OK) SetOk(v bool) {
	o.Ok = &v
}

func (o OK) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OK) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ok) {
		toSerialize["ok"] = o.Ok
	}
	return toSerialize, nil
}

type NullableOK struct {
	value *OK
	isSet bool
}

func (v NullableOK) Get() *OK {
	return v.value
}

func (v *NullableOK) Set(val *OK) {
	v.value = val
	v.isSet = true
}

func (v NullableOK) IsSet() bool {
	return v.isSet
}

func (v *NullableOK) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOK(val *OK) *NullableOK {
	return &NullableOK{value: val, isSet: true}
}

func (v NullableOK) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOK) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


