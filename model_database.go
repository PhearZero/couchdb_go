/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Database type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Database{}

// Database struct for Database
type Database struct {
	// The name of the database.
	DbName *string `json:"db_name,omitempty"`
	Cluster *DatabaseCluster `json:"cluster,omitempty"`
	// Set to true if the database compaction routine is operating on this database.
	CompactRunning *bool `json:"compact_running,omitempty"`
	// The version of the physical format used for the data when it is stored on disk.
	DiskFormatVersion *int32 `json:"disk_format_version,omitempty"`
	// A count of the documents in the specified database.
	DocCount *int32 `json:"doc_count,omitempty"`
	// Number of deleted documents
	DocDelCount *int32 `json:"doc_del_count,omitempty"`
	// Always \"0\". (Returned for legacy reasons.)
	InstanceStartTime *string `json:"instance_start_time,omitempty"`
	// An opaque string that describes the purge state of the database. Do not rely on this string for counting the number of purge operations.
	PurgeSeq *string `json:"purge_seq,omitempty"`
	Sizes *DatabaseSizes `json:"sizes,omitempty"`
	// Always \"0\". (Returned for legacy reasons.)
	UpdateSeq *string `json:"update_seq,omitempty"`
	Props *DatabaseProps `json:"props,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Database Database

// NewDatabase instantiates a new Database object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabase() *Database {
	this := Database{}
	return &this
}

// NewDatabaseWithDefaults instantiates a new Database object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseWithDefaults() *Database {
	this := Database{}
	return &this
}

// GetDbName returns the DbName field value if set, zero value otherwise.
func (o *Database) GetDbName() string {
	if o == nil || IsNil(o.DbName) {
		var ret string
		return ret
	}
	return *o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetDbNameOk() (*string, bool) {
	if o == nil || IsNil(o.DbName) {
		return nil, false
	}
	return o.DbName, true
}

// HasDbName returns a boolean if a field has been set.
func (o *Database) HasDbName() bool {
	if o != nil && !IsNil(o.DbName) {
		return true
	}

	return false
}

// SetDbName gets a reference to the given string and assigns it to the DbName field.
func (o *Database) SetDbName(v string) {
	o.DbName = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *Database) GetCluster() DatabaseCluster {
	if o == nil || IsNil(o.Cluster) {
		var ret DatabaseCluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetClusterOk() (*DatabaseCluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *Database) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given DatabaseCluster and assigns it to the Cluster field.
func (o *Database) SetCluster(v DatabaseCluster) {
	o.Cluster = &v
}

// GetCompactRunning returns the CompactRunning field value if set, zero value otherwise.
func (o *Database) GetCompactRunning() bool {
	if o == nil || IsNil(o.CompactRunning) {
		var ret bool
		return ret
	}
	return *o.CompactRunning
}

// GetCompactRunningOk returns a tuple with the CompactRunning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetCompactRunningOk() (*bool, bool) {
	if o == nil || IsNil(o.CompactRunning) {
		return nil, false
	}
	return o.CompactRunning, true
}

// HasCompactRunning returns a boolean if a field has been set.
func (o *Database) HasCompactRunning() bool {
	if o != nil && !IsNil(o.CompactRunning) {
		return true
	}

	return false
}

// SetCompactRunning gets a reference to the given bool and assigns it to the CompactRunning field.
func (o *Database) SetCompactRunning(v bool) {
	o.CompactRunning = &v
}

// GetDiskFormatVersion returns the DiskFormatVersion field value if set, zero value otherwise.
func (o *Database) GetDiskFormatVersion() int32 {
	if o == nil || IsNil(o.DiskFormatVersion) {
		var ret int32
		return ret
	}
	return *o.DiskFormatVersion
}

// GetDiskFormatVersionOk returns a tuple with the DiskFormatVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetDiskFormatVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskFormatVersion) {
		return nil, false
	}
	return o.DiskFormatVersion, true
}

// HasDiskFormatVersion returns a boolean if a field has been set.
func (o *Database) HasDiskFormatVersion() bool {
	if o != nil && !IsNil(o.DiskFormatVersion) {
		return true
	}

	return false
}

// SetDiskFormatVersion gets a reference to the given int32 and assigns it to the DiskFormatVersion field.
func (o *Database) SetDiskFormatVersion(v int32) {
	o.DiskFormatVersion = &v
}

// GetDocCount returns the DocCount field value if set, zero value otherwise.
func (o *Database) GetDocCount() int32 {
	if o == nil || IsNil(o.DocCount) {
		var ret int32
		return ret
	}
	return *o.DocCount
}

// GetDocCountOk returns a tuple with the DocCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetDocCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DocCount) {
		return nil, false
	}
	return o.DocCount, true
}

// HasDocCount returns a boolean if a field has been set.
func (o *Database) HasDocCount() bool {
	if o != nil && !IsNil(o.DocCount) {
		return true
	}

	return false
}

// SetDocCount gets a reference to the given int32 and assigns it to the DocCount field.
func (o *Database) SetDocCount(v int32) {
	o.DocCount = &v
}

// GetDocDelCount returns the DocDelCount field value if set, zero value otherwise.
func (o *Database) GetDocDelCount() int32 {
	if o == nil || IsNil(o.DocDelCount) {
		var ret int32
		return ret
	}
	return *o.DocDelCount
}

// GetDocDelCountOk returns a tuple with the DocDelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetDocDelCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DocDelCount) {
		return nil, false
	}
	return o.DocDelCount, true
}

// HasDocDelCount returns a boolean if a field has been set.
func (o *Database) HasDocDelCount() bool {
	if o != nil && !IsNil(o.DocDelCount) {
		return true
	}

	return false
}

// SetDocDelCount gets a reference to the given int32 and assigns it to the DocDelCount field.
func (o *Database) SetDocDelCount(v int32) {
	o.DocDelCount = &v
}

// GetInstanceStartTime returns the InstanceStartTime field value if set, zero value otherwise.
func (o *Database) GetInstanceStartTime() string {
	if o == nil || IsNil(o.InstanceStartTime) {
		var ret string
		return ret
	}
	return *o.InstanceStartTime
}

// GetInstanceStartTimeOk returns a tuple with the InstanceStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetInstanceStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceStartTime) {
		return nil, false
	}
	return o.InstanceStartTime, true
}

// HasInstanceStartTime returns a boolean if a field has been set.
func (o *Database) HasInstanceStartTime() bool {
	if o != nil && !IsNil(o.InstanceStartTime) {
		return true
	}

	return false
}

// SetInstanceStartTime gets a reference to the given string and assigns it to the InstanceStartTime field.
func (o *Database) SetInstanceStartTime(v string) {
	o.InstanceStartTime = &v
}

// GetPurgeSeq returns the PurgeSeq field value if set, zero value otherwise.
func (o *Database) GetPurgeSeq() string {
	if o == nil || IsNil(o.PurgeSeq) {
		var ret string
		return ret
	}
	return *o.PurgeSeq
}

// GetPurgeSeqOk returns a tuple with the PurgeSeq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetPurgeSeqOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeSeq) {
		return nil, false
	}
	return o.PurgeSeq, true
}

// HasPurgeSeq returns a boolean if a field has been set.
func (o *Database) HasPurgeSeq() bool {
	if o != nil && !IsNil(o.PurgeSeq) {
		return true
	}

	return false
}

// SetPurgeSeq gets a reference to the given string and assigns it to the PurgeSeq field.
func (o *Database) SetPurgeSeq(v string) {
	o.PurgeSeq = &v
}

// GetSizes returns the Sizes field value if set, zero value otherwise.
func (o *Database) GetSizes() DatabaseSizes {
	if o == nil || IsNil(o.Sizes) {
		var ret DatabaseSizes
		return ret
	}
	return *o.Sizes
}

// GetSizesOk returns a tuple with the Sizes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetSizesOk() (*DatabaseSizes, bool) {
	if o == nil || IsNil(o.Sizes) {
		return nil, false
	}
	return o.Sizes, true
}

// HasSizes returns a boolean if a field has been set.
func (o *Database) HasSizes() bool {
	if o != nil && !IsNil(o.Sizes) {
		return true
	}

	return false
}

// SetSizes gets a reference to the given DatabaseSizes and assigns it to the Sizes field.
func (o *Database) SetSizes(v DatabaseSizes) {
	o.Sizes = &v
}

// GetUpdateSeq returns the UpdateSeq field value if set, zero value otherwise.
func (o *Database) GetUpdateSeq() string {
	if o == nil || IsNil(o.UpdateSeq) {
		var ret string
		return ret
	}
	return *o.UpdateSeq
}

// GetUpdateSeqOk returns a tuple with the UpdateSeq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetUpdateSeqOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateSeq) {
		return nil, false
	}
	return o.UpdateSeq, true
}

// HasUpdateSeq returns a boolean if a field has been set.
func (o *Database) HasUpdateSeq() bool {
	if o != nil && !IsNil(o.UpdateSeq) {
		return true
	}

	return false
}

// SetUpdateSeq gets a reference to the given string and assigns it to the UpdateSeq field.
func (o *Database) SetUpdateSeq(v string) {
	o.UpdateSeq = &v
}

// GetProps returns the Props field value if set, zero value otherwise.
func (o *Database) GetProps() DatabaseProps {
	if o == nil || IsNil(o.Props) {
		var ret DatabaseProps
		return ret
	}
	return *o.Props
}

// GetPropsOk returns a tuple with the Props field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetPropsOk() (*DatabaseProps, bool) {
	if o == nil || IsNil(o.Props) {
		return nil, false
	}
	return o.Props, true
}

// HasProps returns a boolean if a field has been set.
func (o *Database) HasProps() bool {
	if o != nil && !IsNil(o.Props) {
		return true
	}

	return false
}

// SetProps gets a reference to the given DatabaseProps and assigns it to the Props field.
func (o *Database) SetProps(v DatabaseProps) {
	o.Props = &v
}

func (o Database) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Database) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DbName) {
		toSerialize["db_name"] = o.DbName
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.CompactRunning) {
		toSerialize["compact_running"] = o.CompactRunning
	}
	if !IsNil(o.DiskFormatVersion) {
		toSerialize["disk_format_version"] = o.DiskFormatVersion
	}
	if !IsNil(o.DocCount) {
		toSerialize["doc_count"] = o.DocCount
	}
	if !IsNil(o.DocDelCount) {
		toSerialize["doc_del_count"] = o.DocDelCount
	}
	if !IsNil(o.InstanceStartTime) {
		toSerialize["instance_start_time"] = o.InstanceStartTime
	}
	if !IsNil(o.PurgeSeq) {
		toSerialize["purge_seq"] = o.PurgeSeq
	}
	if !IsNil(o.Sizes) {
		toSerialize["sizes"] = o.Sizes
	}
	if !IsNil(o.UpdateSeq) {
		toSerialize["update_seq"] = o.UpdateSeq
	}
	if !IsNil(o.Props) {
		toSerialize["props"] = o.Props
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Database) UnmarshalJSON(bytes []byte) (err error) {
	varDatabase := _Database{}

	if err = json.Unmarshal(bytes, &varDatabase); err == nil {
		*o = Database(varDatabase)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "db_name")
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "compact_running")
		delete(additionalProperties, "disk_format_version")
		delete(additionalProperties, "doc_count")
		delete(additionalProperties, "doc_del_count")
		delete(additionalProperties, "instance_start_time")
		delete(additionalProperties, "purge_seq")
		delete(additionalProperties, "sizes")
		delete(additionalProperties, "update_seq")
		delete(additionalProperties, "props")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabase struct {
	value *Database
	isSet bool
}

func (v NullableDatabase) Get() *Database {
	return v.value
}

func (v *NullableDatabase) Set(val *Database) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabase(val *Database) *NullableDatabase {
	return &NullableDatabase{value: val, isSet: true}
}

func (v NullableDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


