/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the InlineResponse2002 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineResponse2002{}

// InlineResponse2002 struct for InlineResponse2002
type InlineResponse2002 struct {
	AllNodes []string `json:"all_nodes,omitempty"`
	ClusterNodes []string `json:"cluster_nodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InlineResponse2002 InlineResponse2002

// NewInlineResponse2002 instantiates a new InlineResponse2002 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2002() *InlineResponse2002 {
	this := InlineResponse2002{}
	return &this
}

// NewInlineResponse2002WithDefaults instantiates a new InlineResponse2002 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2002WithDefaults() *InlineResponse2002 {
	this := InlineResponse2002{}
	return &this
}

// GetAllNodes returns the AllNodes field value if set, zero value otherwise.
func (o *InlineResponse2002) GetAllNodes() []string {
	if o == nil || IsNil(o.AllNodes) {
		var ret []string
		return ret
	}
	return o.AllNodes
}

// GetAllNodesOk returns a tuple with the AllNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetAllNodesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllNodes) {
		return nil, false
	}
	return o.AllNodes, true
}

// HasAllNodes returns a boolean if a field has been set.
func (o *InlineResponse2002) HasAllNodes() bool {
	if o != nil && !IsNil(o.AllNodes) {
		return true
	}

	return false
}

// SetAllNodes gets a reference to the given []string and assigns it to the AllNodes field.
func (o *InlineResponse2002) SetAllNodes(v []string) {
	o.AllNodes = v
}

// GetClusterNodes returns the ClusterNodes field value if set, zero value otherwise.
func (o *InlineResponse2002) GetClusterNodes() []string {
	if o == nil || IsNil(o.ClusterNodes) {
		var ret []string
		return ret
	}
	return o.ClusterNodes
}

// GetClusterNodesOk returns a tuple with the ClusterNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetClusterNodesOk() ([]string, bool) {
	if o == nil || IsNil(o.ClusterNodes) {
		return nil, false
	}
	return o.ClusterNodes, true
}

// HasClusterNodes returns a boolean if a field has been set.
func (o *InlineResponse2002) HasClusterNodes() bool {
	if o != nil && !IsNil(o.ClusterNodes) {
		return true
	}

	return false
}

// SetClusterNodes gets a reference to the given []string and assigns it to the ClusterNodes field.
func (o *InlineResponse2002) SetClusterNodes(v []string) {
	o.ClusterNodes = v
}

func (o InlineResponse2002) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineResponse2002) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllNodes) {
		toSerialize["all_nodes"] = o.AllNodes
	}
	if !IsNil(o.ClusterNodes) {
		toSerialize["cluster_nodes"] = o.ClusterNodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InlineResponse2002) UnmarshalJSON(bytes []byte) (err error) {
	varInlineResponse2002 := _InlineResponse2002{}

	if err = json.Unmarshal(bytes, &varInlineResponse2002); err == nil {
		*o = InlineResponse2002(varInlineResponse2002)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "all_nodes")
		delete(additionalProperties, "cluster_nodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInlineResponse2002 struct {
	value *InlineResponse2002
	isSet bool
}

func (v NullableInlineResponse2002) Get() *InlineResponse2002 {
	return v.value
}

func (v *NullableInlineResponse2002) Set(val *InlineResponse2002) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2002) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2002) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2002(val *InlineResponse2002) *NullableInlineResponse2002 {
	return &NullableInlineResponse2002{value: val, isSet: true}
}

func (v NullableInlineResponse2002) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2002) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


