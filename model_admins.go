/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Admins type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Admins{}

// Admins they have all the privileges of members plus the privileges: write (and edit) design documents, add/remove database admins and members and set the database revisions limit. They can not create a database nor delete a database. 
type Admins struct {
	// List of CouchDB user names
	Name []string `json:"name,omitempty"`
	// List of users roles
	Roles []string `json:"roles,omitempty"`
}

// NewAdmins instantiates a new Admins object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmins() *Admins {
	this := Admins{}
	return &this
}

// NewAdminsWithDefaults instantiates a new Admins object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminsWithDefaults() *Admins {
	this := Admins{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Admins) GetName() []string {
	if o == nil || IsNil(o.Name) {
		var ret []string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admins) GetNameOk() ([]string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Admins) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *Admins) SetName(v []string) {
	o.Name = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Admins) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admins) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Admins) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Admins) SetRoles(v []string) {
	o.Roles = v
}

func (o Admins) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Admins) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableAdmins struct {
	value *Admins
	isSet bool
}

func (v NullableAdmins) Get() *Admins {
	return v.value
}

func (v *NullableAdmins) Set(val *Admins) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmins) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmins) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmins(val *Admins) *NullableAdmins {
	return &NullableAdmins{value: val, isSet: true}
}

func (v NullableAdmins) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmins) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


