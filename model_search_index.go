/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the SearchIndex type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchIndex{}

// SearchIndex struct for SearchIndex
type SearchIndex struct {
	PendingSeq *int32 `json:"pending_seq,omitempty"`
	DocDelCount *int32 `json:"doc_del_count,omitempty"`
	DocCount *int32 `json:"doc_count,omitempty"`
	DiskSize *int32 `json:"disk_size,omitempty"`
	CommittedSeq *int32 `json:"committed_seq,omitempty"`
}

// NewSearchIndex instantiates a new SearchIndex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchIndex() *SearchIndex {
	this := SearchIndex{}
	return &this
}

// NewSearchIndexWithDefaults instantiates a new SearchIndex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchIndexWithDefaults() *SearchIndex {
	this := SearchIndex{}
	return &this
}

// GetPendingSeq returns the PendingSeq field value if set, zero value otherwise.
func (o *SearchIndex) GetPendingSeq() int32 {
	if o == nil || IsNil(o.PendingSeq) {
		var ret int32
		return ret
	}
	return *o.PendingSeq
}

// GetPendingSeqOk returns a tuple with the PendingSeq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIndex) GetPendingSeqOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingSeq) {
		return nil, false
	}
	return o.PendingSeq, true
}

// HasPendingSeq returns a boolean if a field has been set.
func (o *SearchIndex) HasPendingSeq() bool {
	if o != nil && !IsNil(o.PendingSeq) {
		return true
	}

	return false
}

// SetPendingSeq gets a reference to the given int32 and assigns it to the PendingSeq field.
func (o *SearchIndex) SetPendingSeq(v int32) {
	o.PendingSeq = &v
}

// GetDocDelCount returns the DocDelCount field value if set, zero value otherwise.
func (o *SearchIndex) GetDocDelCount() int32 {
	if o == nil || IsNil(o.DocDelCount) {
		var ret int32
		return ret
	}
	return *o.DocDelCount
}

// GetDocDelCountOk returns a tuple with the DocDelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIndex) GetDocDelCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DocDelCount) {
		return nil, false
	}
	return o.DocDelCount, true
}

// HasDocDelCount returns a boolean if a field has been set.
func (o *SearchIndex) HasDocDelCount() bool {
	if o != nil && !IsNil(o.DocDelCount) {
		return true
	}

	return false
}

// SetDocDelCount gets a reference to the given int32 and assigns it to the DocDelCount field.
func (o *SearchIndex) SetDocDelCount(v int32) {
	o.DocDelCount = &v
}

// GetDocCount returns the DocCount field value if set, zero value otherwise.
func (o *SearchIndex) GetDocCount() int32 {
	if o == nil || IsNil(o.DocCount) {
		var ret int32
		return ret
	}
	return *o.DocCount
}

// GetDocCountOk returns a tuple with the DocCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIndex) GetDocCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DocCount) {
		return nil, false
	}
	return o.DocCount, true
}

// HasDocCount returns a boolean if a field has been set.
func (o *SearchIndex) HasDocCount() bool {
	if o != nil && !IsNil(o.DocCount) {
		return true
	}

	return false
}

// SetDocCount gets a reference to the given int32 and assigns it to the DocCount field.
func (o *SearchIndex) SetDocCount(v int32) {
	o.DocCount = &v
}

// GetDiskSize returns the DiskSize field value if set, zero value otherwise.
func (o *SearchIndex) GetDiskSize() int32 {
	if o == nil || IsNil(o.DiskSize) {
		var ret int32
		return ret
	}
	return *o.DiskSize
}

// GetDiskSizeOk returns a tuple with the DiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIndex) GetDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskSize) {
		return nil, false
	}
	return o.DiskSize, true
}

// HasDiskSize returns a boolean if a field has been set.
func (o *SearchIndex) HasDiskSize() bool {
	if o != nil && !IsNil(o.DiskSize) {
		return true
	}

	return false
}

// SetDiskSize gets a reference to the given int32 and assigns it to the DiskSize field.
func (o *SearchIndex) SetDiskSize(v int32) {
	o.DiskSize = &v
}

// GetCommittedSeq returns the CommittedSeq field value if set, zero value otherwise.
func (o *SearchIndex) GetCommittedSeq() int32 {
	if o == nil || IsNil(o.CommittedSeq) {
		var ret int32
		return ret
	}
	return *o.CommittedSeq
}

// GetCommittedSeqOk returns a tuple with the CommittedSeq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIndex) GetCommittedSeqOk() (*int32, bool) {
	if o == nil || IsNil(o.CommittedSeq) {
		return nil, false
	}
	return o.CommittedSeq, true
}

// HasCommittedSeq returns a boolean if a field has been set.
func (o *SearchIndex) HasCommittedSeq() bool {
	if o != nil && !IsNil(o.CommittedSeq) {
		return true
	}

	return false
}

// SetCommittedSeq gets a reference to the given int32 and assigns it to the CommittedSeq field.
func (o *SearchIndex) SetCommittedSeq(v int32) {
	o.CommittedSeq = &v
}

func (o SearchIndex) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchIndex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PendingSeq) {
		toSerialize["pending_seq"] = o.PendingSeq
	}
	if !IsNil(o.DocDelCount) {
		toSerialize["doc_del_count"] = o.DocDelCount
	}
	if !IsNil(o.DocCount) {
		toSerialize["doc_count"] = o.DocCount
	}
	if !IsNil(o.DiskSize) {
		toSerialize["disk_size"] = o.DiskSize
	}
	if !IsNil(o.CommittedSeq) {
		toSerialize["committed_seq"] = o.CommittedSeq
	}
	return toSerialize, nil
}

type NullableSearchIndex struct {
	value *SearchIndex
	isSet bool
}

func (v NullableSearchIndex) Get() *SearchIndex {
	return v.value
}

func (v *NullableSearchIndex) Set(val *SearchIndex) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchIndex(val *SearchIndex) *NullableSearchIndex {
	return &NullableSearchIndex{value: val, isSet: true}
}

func (v NullableSearchIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


