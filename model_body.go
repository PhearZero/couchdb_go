/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Body type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Body{}

// Body struct for Body
type Body struct {
	Action *string `json:"action,omitempty"`
}

// NewBody instantiates a new Body object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBody() *Body {
	this := Body{}
	return &this
}

// NewBodyWithDefaults instantiates a new Body object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyWithDefaults() *Body {
	this := Body{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Body) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Body) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Body) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *Body) SetAction(v string) {
	o.Action = &v
}

func (o Body) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Body) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullableBody struct {
	value *Body
	isSet bool
}

func (v NullableBody) Get() *Body {
	return v.value
}

func (v *NullableBody) Set(val *Body) {
	v.value = val
	v.isSet = true
}

func (v NullableBody) IsSet() bool {
	return v.isSet
}

func (v *NullableBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBody(val *Body) *NullableBody {
	return &NullableBody{value: val, isSet: true}
}

func (v NullableBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


