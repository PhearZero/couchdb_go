/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the ErrorBulkGetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorBulkGetResponse{}

// ErrorBulkGetResponse struct for ErrorBulkGetResponse
type ErrorBulkGetResponse struct {
	// Error type. Available if response code is 4xx
	Error *string `json:"error,omitempty"`
	// Error description. Available if response code is 4xx
	Reason *string `json:"reason,omitempty"`
	Id *string `json:"id,omitempty"`
	Rev *string `json:"rev,omitempty"`
}

// NewErrorBulkGetResponse instantiates a new ErrorBulkGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorBulkGetResponse() *ErrorBulkGetResponse {
	this := ErrorBulkGetResponse{}
	return &this
}

// NewErrorBulkGetResponseWithDefaults instantiates a new ErrorBulkGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorBulkGetResponseWithDefaults() *ErrorBulkGetResponse {
	this := ErrorBulkGetResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ErrorBulkGetResponse) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorBulkGetResponse) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ErrorBulkGetResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ErrorBulkGetResponse) SetError(v string) {
	o.Error = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ErrorBulkGetResponse) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorBulkGetResponse) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ErrorBulkGetResponse) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ErrorBulkGetResponse) SetReason(v string) {
	o.Reason = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ErrorBulkGetResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorBulkGetResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ErrorBulkGetResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ErrorBulkGetResponse) SetId(v string) {
	o.Id = &v
}

// GetRev returns the Rev field value if set, zero value otherwise.
func (o *ErrorBulkGetResponse) GetRev() string {
	if o == nil || IsNil(o.Rev) {
		var ret string
		return ret
	}
	return *o.Rev
}

// GetRevOk returns a tuple with the Rev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorBulkGetResponse) GetRevOk() (*string, bool) {
	if o == nil || IsNil(o.Rev) {
		return nil, false
	}
	return o.Rev, true
}

// HasRev returns a boolean if a field has been set.
func (o *ErrorBulkGetResponse) HasRev() bool {
	if o != nil && !IsNil(o.Rev) {
		return true
	}

	return false
}

// SetRev gets a reference to the given string and assigns it to the Rev field.
func (o *ErrorBulkGetResponse) SetRev(v string) {
	o.Rev = &v
}

func (o ErrorBulkGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorBulkGetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Rev) {
		toSerialize["rev"] = o.Rev
	}
	return toSerialize, nil
}

type NullableErrorBulkGetResponse struct {
	value *ErrorBulkGetResponse
	isSet bool
}

func (v NullableErrorBulkGetResponse) Get() *ErrorBulkGetResponse {
	return v.value
}

func (v *NullableErrorBulkGetResponse) Set(val *ErrorBulkGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorBulkGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorBulkGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorBulkGetResponse(val *ErrorBulkGetResponse) *NullableErrorBulkGetResponse {
	return &NullableErrorBulkGetResponse{value: val, isSet: true}
}

func (v NullableErrorBulkGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorBulkGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


