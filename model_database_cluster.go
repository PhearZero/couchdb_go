/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the DatabaseCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseCluster{}

// DatabaseCluster struct for DatabaseCluster
type DatabaseCluster struct {
	// Replicas. The number of copies of every document.
	N *int32 `json:"n,omitempty"`
	// Shards. The number of range partitions.
	Q *int32 `json:"q,omitempty"`
	// Read quorum. The number of consistent copies of a document that need to be read before a successful reply.
	R *int32 `json:"r,omitempty"`
	// Write quorum. The number of copies of a document that need to be written before a successful reply.
	W *int32 `json:"w,omitempty"`
}

// NewDatabaseCluster instantiates a new DatabaseCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseCluster() *DatabaseCluster {
	this := DatabaseCluster{}
	return &this
}

// NewDatabaseClusterWithDefaults instantiates a new DatabaseCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseClusterWithDefaults() *DatabaseCluster {
	this := DatabaseCluster{}
	return &this
}

// GetN returns the N field value if set, zero value otherwise.
func (o *DatabaseCluster) GetN() int32 {
	if o == nil || IsNil(o.N) {
		var ret int32
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCluster) GetNOk() (*int32, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *DatabaseCluster) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given int32 and assigns it to the N field.
func (o *DatabaseCluster) SetN(v int32) {
	o.N = &v
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *DatabaseCluster) GetQ() int32 {
	if o == nil || IsNil(o.Q) {
		var ret int32
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCluster) GetQOk() (*int32, bool) {
	if o == nil || IsNil(o.Q) {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *DatabaseCluster) HasQ() bool {
	if o != nil && !IsNil(o.Q) {
		return true
	}

	return false
}

// SetQ gets a reference to the given int32 and assigns it to the Q field.
func (o *DatabaseCluster) SetQ(v int32) {
	o.Q = &v
}

// GetR returns the R field value if set, zero value otherwise.
func (o *DatabaseCluster) GetR() int32 {
	if o == nil || IsNil(o.R) {
		var ret int32
		return ret
	}
	return *o.R
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCluster) GetROk() (*int32, bool) {
	if o == nil || IsNil(o.R) {
		return nil, false
	}
	return o.R, true
}

// HasR returns a boolean if a field has been set.
func (o *DatabaseCluster) HasR() bool {
	if o != nil && !IsNil(o.R) {
		return true
	}

	return false
}

// SetR gets a reference to the given int32 and assigns it to the R field.
func (o *DatabaseCluster) SetR(v int32) {
	o.R = &v
}

// GetW returns the W field value if set, zero value otherwise.
func (o *DatabaseCluster) GetW() int32 {
	if o == nil || IsNil(o.W) {
		var ret int32
		return ret
	}
	return *o.W
}

// GetWOk returns a tuple with the W field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseCluster) GetWOk() (*int32, bool) {
	if o == nil || IsNil(o.W) {
		return nil, false
	}
	return o.W, true
}

// HasW returns a boolean if a field has been set.
func (o *DatabaseCluster) HasW() bool {
	if o != nil && !IsNil(o.W) {
		return true
	}

	return false
}

// SetW gets a reference to the given int32 and assigns it to the W field.
func (o *DatabaseCluster) SetW(v int32) {
	o.W = &v
}

func (o DatabaseCluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	if !IsNil(o.Q) {
		toSerialize["q"] = o.Q
	}
	if !IsNil(o.R) {
		toSerialize["r"] = o.R
	}
	if !IsNil(o.W) {
		toSerialize["w"] = o.W
	}
	return toSerialize, nil
}

type NullableDatabaseCluster struct {
	value *DatabaseCluster
	isSet bool
}

func (v NullableDatabaseCluster) Get() *DatabaseCluster {
	return v.value
}

func (v *NullableDatabaseCluster) Set(val *DatabaseCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseCluster(val *DatabaseCluster) *NullableDatabaseCluster {
	return &NullableDatabaseCluster{value: val, isSet: true}
}

func (v NullableDatabaseCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


