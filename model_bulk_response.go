/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the BulkResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkResponse{}

// BulkResponse struct for BulkResponse
type BulkResponse struct {
	// Operation status
	Ok *bool `json:"ok,omitempty"`
	Id *string `json:"id,omitempty"`
	Rev *string `json:"rev,omitempty"`
	// Error type. Available if response code is 4xx
	Error *string `json:"error,omitempty"`
	// Error description. Available if response code is 4xx
	Reason *string `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BulkResponse BulkResponse

// NewBulkResponse instantiates a new BulkResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkResponse() *BulkResponse {
	this := BulkResponse{}
	return &this
}

// NewBulkResponseWithDefaults instantiates a new BulkResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkResponseWithDefaults() *BulkResponse {
	this := BulkResponse{}
	return &this
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *BulkResponse) GetOk() bool {
	if o == nil || IsNil(o.Ok) {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkResponse) GetOkOk() (*bool, bool) {
	if o == nil || IsNil(o.Ok) {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *BulkResponse) HasOk() bool {
	if o != nil && !IsNil(o.Ok) {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *BulkResponse) SetOk(v bool) {
	o.Ok = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BulkResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BulkResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BulkResponse) SetId(v string) {
	o.Id = &v
}

// GetRev returns the Rev field value if set, zero value otherwise.
func (o *BulkResponse) GetRev() string {
	if o == nil || IsNil(o.Rev) {
		var ret string
		return ret
	}
	return *o.Rev
}

// GetRevOk returns a tuple with the Rev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkResponse) GetRevOk() (*string, bool) {
	if o == nil || IsNil(o.Rev) {
		return nil, false
	}
	return o.Rev, true
}

// HasRev returns a boolean if a field has been set.
func (o *BulkResponse) HasRev() bool {
	if o != nil && !IsNil(o.Rev) {
		return true
	}

	return false
}

// SetRev gets a reference to the given string and assigns it to the Rev field.
func (o *BulkResponse) SetRev(v string) {
	o.Rev = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BulkResponse) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkResponse) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BulkResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *BulkResponse) SetError(v string) {
	o.Error = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *BulkResponse) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkResponse) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *BulkResponse) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *BulkResponse) SetReason(v string) {
	o.Reason = &v
}

func (o BulkResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ok) {
		toSerialize["ok"] = o.Ok
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Rev) {
		toSerialize["rev"] = o.Rev
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BulkResponse) UnmarshalJSON(bytes []byte) (err error) {
	varBulkResponse := _BulkResponse{}

	if err = json.Unmarshal(bytes, &varBulkResponse); err == nil {
		*o = BulkResponse(varBulkResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ok")
		delete(additionalProperties, "id")
		delete(additionalProperties, "rev")
		delete(additionalProperties, "error")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBulkResponse struct {
	value *BulkResponse
	isSet bool
}

func (v NullableBulkResponse) Get() *BulkResponse {
	return v.value
}

func (v *NullableBulkResponse) Set(val *BulkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkResponse(val *BulkResponse) *NullableBulkResponse {
	return &NullableBulkResponse{value: val, isSet: true}
}

func (v NullableBulkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


