// Code generated by go-swagger; DO NOT EDIT.

package partition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/rossmerr/couchdb_go/models"
)

// PartitionDocPostAllReader is a Reader for the PartitionDocPostAll structure.
type PartitionDocPostAllReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PartitionDocPostAllReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPartitionDocPostAllOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPartitionDocPostAllNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPartitionDocPostAllOK creates a PartitionDocPostAllOK with default headers values
func NewPartitionDocPostAllOK() *PartitionDocPostAllOK {
	return &PartitionDocPostAllOK{}
}

/*PartitionDocPostAllOK handles this case with default header values.

Request completed successfully
*/
type PartitionDocPostAllOK struct {
	Payload *models.Pagination
}

func (o *PartitionDocPostAllOK) Error() string {
	return fmt.Sprintf("[POST /{db}/_partition/{partition}/_all_docs][%d] partitionDocPostAllOK  %+v", 200, o.Payload)
}

func (o *PartitionDocPostAllOK) GetPayload() *models.Pagination {
	return o.Payload
}

func (o *PartitionDocPostAllOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Pagination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartitionDocPostAllNotFound creates a PartitionDocPostAllNotFound with default headers values
func NewPartitionDocPostAllNotFound() *PartitionDocPostAllNotFound {
	return &PartitionDocPostAllNotFound{}
}

/*PartitionDocPostAllNotFound handles this case with default header values.

Requested database not found
*/
type PartitionDocPostAllNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PartitionDocPostAllNotFound) Error() string {
	return fmt.Sprintf("[POST /{db}/_partition/{partition}/_all_docs][%d] partitionDocPostAllNotFound  %+v", 404, o.Payload)
}

func (o *PartitionDocPostAllNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PartitionDocPostAllNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
