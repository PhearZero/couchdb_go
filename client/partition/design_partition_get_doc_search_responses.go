// Code generated by go-swagger; DO NOT EDIT.

package partition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/RossMerr/couchdb_go/models"
)

// DesignPartitionGetDocSearchReader is a Reader for the DesignPartitionGetDocSearch structure.
type DesignPartitionGetDocSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DesignPartitionGetDocSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDesignPartitionGetDocSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDesignPartitionGetDocSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDesignPartitionGetDocSearchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDesignPartitionGetDocSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDesignPartitionGetDocSearchOK creates a DesignPartitionGetDocSearchOK with default headers values
func NewDesignPartitionGetDocSearchOK() *DesignPartitionGetDocSearchOK {
	return &DesignPartitionGetDocSearchOK{}
}

/*DesignPartitionGetDocSearchOK handles this case with default header values.

Request completed successfully
*/
type DesignPartitionGetDocSearchOK struct {
	/*Response signature
	 */
	ETag string
	/*chunked
	 */
	TransferEncoding string

	Payload *models.Pagination
}

func (o *DesignPartitionGetDocSearchOK) Error() string {
	return fmt.Sprintf("[GET /{db}/_partition/{partition}/_design/{ddoc}/_search/{index}][%d] designPartitionGetDocSearchOK  %+v", 200, o.Payload)
}

func (o *DesignPartitionGetDocSearchOK) GetPayload() *models.Pagination {
	return o.Payload
}

func (o *DesignPartitionGetDocSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Transfer-Encoding
	o.TransferEncoding = response.GetHeader("Transfer-Encoding")

	o.Payload = new(models.Pagination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignPartitionGetDocSearchBadRequest creates a DesignPartitionGetDocSearchBadRequest with default headers values
func NewDesignPartitionGetDocSearchBadRequest() *DesignPartitionGetDocSearchBadRequest {
	return &DesignPartitionGetDocSearchBadRequest{}
}

/*DesignPartitionGetDocSearchBadRequest handles this case with default header values.

Invalid request
*/
type DesignPartitionGetDocSearchBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DesignPartitionGetDocSearchBadRequest) Error() string {
	return fmt.Sprintf("[GET /{db}/_partition/{partition}/_design/{ddoc}/_search/{index}][%d] designPartitionGetDocSearchBadRequest  %+v", 400, o.Payload)
}

func (o *DesignPartitionGetDocSearchBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignPartitionGetDocSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignPartitionGetDocSearchUnauthorized creates a DesignPartitionGetDocSearchUnauthorized with default headers values
func NewDesignPartitionGetDocSearchUnauthorized() *DesignPartitionGetDocSearchUnauthorized {
	return &DesignPartitionGetDocSearchUnauthorized{}
}

/*DesignPartitionGetDocSearchUnauthorized handles this case with default header values.

Read permission required
*/
type DesignPartitionGetDocSearchUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DesignPartitionGetDocSearchUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{db}/_partition/{partition}/_design/{ddoc}/_search/{index}][%d] designPartitionGetDocSearchUnauthorized  %+v", 401, o.Payload)
}

func (o *DesignPartitionGetDocSearchUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignPartitionGetDocSearchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignPartitionGetDocSearchNotFound creates a DesignPartitionGetDocSearchNotFound with default headers values
func NewDesignPartitionGetDocSearchNotFound() *DesignPartitionGetDocSearchNotFound {
	return &DesignPartitionGetDocSearchNotFound{}
}

/*DesignPartitionGetDocSearchNotFound handles this case with default header values.

Specified database, design document or view is missed
*/
type DesignPartitionGetDocSearchNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DesignPartitionGetDocSearchNotFound) Error() string {
	return fmt.Sprintf("[GET /{db}/_partition/{partition}/_design/{ddoc}/_search/{index}][%d] designPartitionGetDocSearchNotFound  %+v", 404, o.Payload)
}

func (o *DesignPartitionGetDocSearchNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignPartitionGetDocSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
