// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewServeAllDBsParams creates a new ServeAllDBsParams object
// with the default values initialized.
func NewServeAllDBsParams() *ServeAllDBsParams {
	var ()
	return &ServeAllDBsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewServeAllDBsParamsWithTimeout creates a new ServeAllDBsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewServeAllDBsParamsWithTimeout(timeout time.Duration) *ServeAllDBsParams {
	var ()
	return &ServeAllDBsParams{

		timeout: timeout,
	}
}

// NewServeAllDBsParamsWithContext creates a new ServeAllDBsParams object
// with the default values initialized, and the ability to set a context for a request
func NewServeAllDBsParamsWithContext(ctx context.Context) *ServeAllDBsParams {
	var ()
	return &ServeAllDBsParams{

		Context: ctx,
	}
}

// NewServeAllDBsParamsWithHTTPClient creates a new ServeAllDBsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewServeAllDBsParamsWithHTTPClient(client *http.Client) *ServeAllDBsParams {
	var ()
	return &ServeAllDBsParams{
		HTTPClient: client,
	}
}

/*ServeAllDBsParams contains all the parameters to send to the API endpoint
for the serve all d bs operation typically these are written to a http.Request
*/
type ServeAllDBsParams struct {

	/*Descending
	  Return the databases in descending order by key. Default is false.

	*/
	Descending *bool
	/*EndKey
	  Alias for endkey param

	*/
	EndKey *string
	/*Endkey
	  Stop returning databases when the specified key is reached.

	*/
	Endkey *string
	/*Limit
	  Limit the number of the returned databases to the specified number.

	*/
	Limit *int64
	/*Skip
	  Skip this number of databases before starting to return the results. Default is 0.

	*/
	Skip *int64
	/*StartKey
	  Alias for startkey.

	*/
	StartKey *string
	/*Startkey
	  Return databases starting with the specified key.

	*/
	Startkey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the serve all d bs params
func (o *ServeAllDBsParams) WithTimeout(timeout time.Duration) *ServeAllDBsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the serve all d bs params
func (o *ServeAllDBsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the serve all d bs params
func (o *ServeAllDBsParams) WithContext(ctx context.Context) *ServeAllDBsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the serve all d bs params
func (o *ServeAllDBsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the serve all d bs params
func (o *ServeAllDBsParams) WithHTTPClient(client *http.Client) *ServeAllDBsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the serve all d bs params
func (o *ServeAllDBsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescending adds the descending to the serve all d bs params
func (o *ServeAllDBsParams) WithDescending(descending *bool) *ServeAllDBsParams {
	o.SetDescending(descending)
	return o
}

// SetDescending adds the descending to the serve all d bs params
func (o *ServeAllDBsParams) SetDescending(descending *bool) {
	o.Descending = descending
}

// WithEndKey adds the endKey to the serve all d bs params
func (o *ServeAllDBsParams) WithEndKey(endKey *string) *ServeAllDBsParams {
	o.SetEndKey(endKey)
	return o
}

// SetEndKey adds the endKey to the serve all d bs params
func (o *ServeAllDBsParams) SetEndKey(endKey *string) {
	o.EndKey = endKey
}

// WithEndkey adds the endkey to the serve all d bs params
func (o *ServeAllDBsParams) WithEndkey(endkey *string) *ServeAllDBsParams {
	o.SetEndkey(endkey)
	return o
}

// SetEndkey adds the endkey to the serve all d bs params
func (o *ServeAllDBsParams) SetEndkey(endkey *string) {
	o.Endkey = endkey
}

// WithLimit adds the limit to the serve all d bs params
func (o *ServeAllDBsParams) WithLimit(limit *int64) *ServeAllDBsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the serve all d bs params
func (o *ServeAllDBsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSkip adds the skip to the serve all d bs params
func (o *ServeAllDBsParams) WithSkip(skip *int64) *ServeAllDBsParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the serve all d bs params
func (o *ServeAllDBsParams) SetSkip(skip *int64) {
	o.Skip = skip
}

// WithStartKey adds the startKey to the serve all d bs params
func (o *ServeAllDBsParams) WithStartKey(startKey *string) *ServeAllDBsParams {
	o.SetStartKey(startKey)
	return o
}

// SetStartKey adds the startKey to the serve all d bs params
func (o *ServeAllDBsParams) SetStartKey(startKey *string) {
	o.StartKey = startKey
}

// WithStartkey adds the startkey to the serve all d bs params
func (o *ServeAllDBsParams) WithStartkey(startkey *string) *ServeAllDBsParams {
	o.SetStartkey(startkey)
	return o
}

// SetStartkey adds the startkey to the serve all d bs params
func (o *ServeAllDBsParams) SetStartkey(startkey *string) {
	o.Startkey = startkey
}

// WriteToRequest writes these params to a swagger request
func (o *ServeAllDBsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Descending != nil {

		// query param descending
		var qrDescending bool
		if o.Descending != nil {
			qrDescending = *o.Descending
		}
		qDescending := swag.FormatBool(qrDescending)
		if qDescending != "" {
			if err := r.SetQueryParam("descending", qDescending); err != nil {
				return err
			}
		}

	}

	if o.EndKey != nil {

		// query param end_key
		var qrEndKey string
		if o.EndKey != nil {
			qrEndKey = *o.EndKey
		}
		qEndKey := qrEndKey
		if qEndKey != "" {
			if err := r.SetQueryParam("end_key", qEndKey); err != nil {
				return err
			}
		}

	}

	if o.Endkey != nil {

		// query param endkey
		var qrEndkey string
		if o.Endkey != nil {
			qrEndkey = *o.Endkey
		}
		qEndkey := qrEndkey
		if qEndkey != "" {
			if err := r.SetQueryParam("endkey", qEndkey); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int64
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt64(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if o.StartKey != nil {

		// query param start_key
		var qrStartKey string
		if o.StartKey != nil {
			qrStartKey = *o.StartKey
		}
		qStartKey := qrStartKey
		if qStartKey != "" {
			if err := r.SetQueryParam("start_key", qStartKey); err != nil {
				return err
			}
		}

	}

	if o.Startkey != nil {

		// query param startkey
		var qrStartkey string
		if o.Startkey != nil {
			qrStartkey = *o.Startkey
		}
		qStartkey := qrStartkey
		if qStartkey != "" {
			if err := r.SetQueryParam("startkey", qStartkey); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
