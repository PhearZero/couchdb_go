// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ServeAllDBs(params *ServeAllDBsParams) (*ServeAllDBsOK, error)

	Server(params *ServerParams) (*ServerOK, error)

	ServerActiveTasks(params *ServerActiveTasksParams) (*ServerActiveTasksOK, error)

	ServerClusterSetup(params *ServerClusterSetupParams) (*ServerClusterSetupOK, error)

	ServerDBsInfo(params *ServerDBsInfoParams) (*ServerDBsInfoOK, error)

	ServerMembership(params *ServerMembershipParams) (*ServerMembershipOK, error)

	ServerPostClusterSetup(params *ServerPostClusterSetupParams) (*ServerPostClusterSetupOK, error)

	ServerReplication(params *ServerReplicationParams) (*ServerReplicationOK, *ServerReplicationAccepted, error)

	ServerSearchAnalyze(params *ServerSearchAnalyzeParams) (*ServerSearchAnalyzeOK, error)

	ServerUp(params *ServerUpParams) (*ServerUpOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ServeAllDBs returns a list of all the databases in the couch d b instance
*/
func (a *Client) ServeAllDBs(params *ServeAllDBsParams) (*ServeAllDBsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAllDBsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAllDBs",
		Method:             "GET",
		PathPattern:        "/_all_dbs",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServeAllDBsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeAllDBsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveAllDBs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Server accessings the root of a couch d b instance returns meta information about the instance

  The response is a JSON structure containing information about the server, including a welcome message and the version of the server.

*/
func (a *Client) Server(params *ServerParams) (*ServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "server",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerActiveTasks lists of running tasks including the task type name status and process ID

  The result is a JSON array of the currently running tasks, with each task being described with a single object. Depending on operation type set of response object fields might be different.

*/
func (a *Client) ServerActiveTasks(params *ServerActiveTasksParams) (*ServerActiveTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerActiveTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serverActiveTasks",
		Method:             "GET",
		PathPattern:        "/_active_tasks",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerActiveTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerActiveTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serverActiveTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerClusterSetup returns the status of the node or cluster per the cluster setup wizard
*/
func (a *Client) ServerClusterSetup(params *ServerClusterSetupParams) (*ServerClusterSetupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerClusterSetupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serverClusterSetup",
		Method:             "GET",
		PathPattern:        "/_cluster_setup",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerClusterSetupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerClusterSetupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serverClusterSetup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerDBsInfo returns information of a list of the specified databases in the couch d b instance

  This enables you to request information about multiple databases in a single request, in place of multiple GET /{db} requests.

*/
func (a *Client) ServerDBsInfo(params *ServerDBsInfoParams) (*ServerDBsInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerDBsInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serverDBsInfo",
		Method:             "POST",
		PathPattern:        "/_dbs_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerDBsInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerDBsInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serverDBsInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerMembership displays the nodes that are part of the cluster as cluster nodes

  The field all_nodes displays all nodes this node knows about, including the ones that are part of the cluster. The endpoint is useful when setting up a cluster, see Node Management

*/
func (a *Client) ServerMembership(params *ServerMembershipParams) (*ServerMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerMembershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serverMembership",
		Method:             "GET",
		PathPattern:        "/_membership",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerMembershipReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerMembershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serverMembership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerPostClusterSetup configures a node as a single standalone node as part of a cluster or finalise a cluster
*/
func (a *Client) ServerPostClusterSetup(params *ServerPostClusterSetupParams) (*ServerPostClusterSetupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerPostClusterSetupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serverPostClusterSetup",
		Method:             "POST",
		PathPattern:        "/_cluster_setup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerPostClusterSetupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerPostClusterSetupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serverPostClusterSetup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerReplication requests configure or stop a replication operation
*/
func (a *Client) ServerReplication(params *ServerReplicationParams) (*ServerReplicationOK, *ServerReplicationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerReplicationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serverReplication",
		Method:             "POST",
		PathPattern:        "/_replicate",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerReplicationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ServerReplicationOK:
		return value, nil, nil
	case *ServerReplicationAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerSearchAnalyze tests the results of lucene analyzer tokenization on sample text

  *Warning*
Search endpoints require a running search plugin connected to each cluster node. See Search Plugin Installation for details.

*/
func (a *Client) ServerSearchAnalyze(params *ServerSearchAnalyzeParams) (*ServerSearchAnalyzeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerSearchAnalyzeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serverSearchAnalyze",
		Method:             "POST",
		PathPattern:        "/_search_analyze",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerSearchAnalyzeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerSearchAnalyzeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serverSearchAnalyze: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServerUp confirms that the server is up running and ready to respond to requests

  If maintenance_mode is true or nolb, the endpoint will return a 404 response.

*/
func (a *Client) ServerUp(params *ServerUpParams) (*ServerUpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerUpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serverUp",
		Method:             "GET",
		PathPattern:        "/_up",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServerUpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerUpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serverUp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
