// Code generated by go-swagger; DO NOT EDIT.

package design_documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDesignGetDocParams creates a new DesignGetDocParams object
// with the default values initialized.
func NewDesignGetDocParams() *DesignGetDocParams {
	var ()
	return &DesignGetDocParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDesignGetDocParamsWithTimeout creates a new DesignGetDocParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDesignGetDocParamsWithTimeout(timeout time.Duration) *DesignGetDocParams {
	var ()
	return &DesignGetDocParams{

		timeout: timeout,
	}
}

// NewDesignGetDocParamsWithContext creates a new DesignGetDocParams object
// with the default values initialized, and the ability to set a context for a request
func NewDesignGetDocParamsWithContext(ctx context.Context) *DesignGetDocParams {
	var ()
	return &DesignGetDocParams{

		Context: ctx,
	}
}

// NewDesignGetDocParamsWithHTTPClient creates a new DesignGetDocParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDesignGetDocParamsWithHTTPClient(client *http.Client) *DesignGetDocParams {
	var ()
	return &DesignGetDocParams{
		HTTPClient: client,
	}
}

/*DesignGetDocParams contains all the parameters to send to the API endpoint
for the design get doc operation typically these are written to a http.Request
*/
type DesignGetDocParams struct {

	/*IfNoneMatch
	  Double quoted document’s revision token

	*/
	IfNoneMatch string
	/*AttEncodingInfo
	  Includes encoding information in attachment stubs if the particular attachment is compressed. Default is false.

	*/
	AttEncodingInfo *bool
	/*Attachments
	  Includes attachments bodies in response. Default is false

	*/
	Attachments *bool
	/*AttsSince
	  Includes attachments only since specified revisions. Doesn’t includes attachments for specified revisions. Optional

	*/
	AttsSince []string
	/*Conflicts
	  Includes information about conflicts in document. Default is false

	*/
	Conflicts *bool
	/*Db
	  Database name

	*/
	Db string
	/*Ddoc
	  Design document id

	*/
	Ddoc string
	/*DeletedConflicts
	  Includes information about deleted conflicted revisions. Default is false

	*/
	DeletedConflicts *bool
	/*Latest
	  Forces retrieving latest “leaf” revision, no matter what rev was requested. Default is false

	*/
	Latest *bool
	/*LocalSeq
	  Includes last update sequence for the document. Default is false

	*/
	LocalSeq *bool
	/*Meta
	  Acts same as specifying all conflicts, deleted_conflicts and revs_info query parameters. Default is false

	*/
	Meta *bool
	/*OpenRevs
	  Retrieves documents of specified leaf revisions. Additionally, it accepts value as all to return all leaf revisions. Optional

	*/
	OpenRevs []string
	/*Rev
	  Retrieves document of specified revision. Optional

	*/
	Rev *string
	/*Revs
	  Includes list of all known document revisions. Default is false

	*/
	Revs *bool
	/*RevsInfo
	  Includes detailed information for all known document revisions. Default is false

	*/
	RevsInfo *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the design get doc params
func (o *DesignGetDocParams) WithTimeout(timeout time.Duration) *DesignGetDocParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the design get doc params
func (o *DesignGetDocParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the design get doc params
func (o *DesignGetDocParams) WithContext(ctx context.Context) *DesignGetDocParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the design get doc params
func (o *DesignGetDocParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the design get doc params
func (o *DesignGetDocParams) WithHTTPClient(client *http.Client) *DesignGetDocParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the design get doc params
func (o *DesignGetDocParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfNoneMatch adds the ifNoneMatch to the design get doc params
func (o *DesignGetDocParams) WithIfNoneMatch(ifNoneMatch string) *DesignGetDocParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the design get doc params
func (o *DesignGetDocParams) SetIfNoneMatch(ifNoneMatch string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithAttEncodingInfo adds the attEncodingInfo to the design get doc params
func (o *DesignGetDocParams) WithAttEncodingInfo(attEncodingInfo *bool) *DesignGetDocParams {
	o.SetAttEncodingInfo(attEncodingInfo)
	return o
}

// SetAttEncodingInfo adds the attEncodingInfo to the design get doc params
func (o *DesignGetDocParams) SetAttEncodingInfo(attEncodingInfo *bool) {
	o.AttEncodingInfo = attEncodingInfo
}

// WithAttachments adds the attachments to the design get doc params
func (o *DesignGetDocParams) WithAttachments(attachments *bool) *DesignGetDocParams {
	o.SetAttachments(attachments)
	return o
}

// SetAttachments adds the attachments to the design get doc params
func (o *DesignGetDocParams) SetAttachments(attachments *bool) {
	o.Attachments = attachments
}

// WithAttsSince adds the attsSince to the design get doc params
func (o *DesignGetDocParams) WithAttsSince(attsSince []string) *DesignGetDocParams {
	o.SetAttsSince(attsSince)
	return o
}

// SetAttsSince adds the attsSince to the design get doc params
func (o *DesignGetDocParams) SetAttsSince(attsSince []string) {
	o.AttsSince = attsSince
}

// WithConflicts adds the conflicts to the design get doc params
func (o *DesignGetDocParams) WithConflicts(conflicts *bool) *DesignGetDocParams {
	o.SetConflicts(conflicts)
	return o
}

// SetConflicts adds the conflicts to the design get doc params
func (o *DesignGetDocParams) SetConflicts(conflicts *bool) {
	o.Conflicts = conflicts
}

// WithDb adds the db to the design get doc params
func (o *DesignGetDocParams) WithDb(db string) *DesignGetDocParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the design get doc params
func (o *DesignGetDocParams) SetDb(db string) {
	o.Db = db
}

// WithDdoc adds the ddoc to the design get doc params
func (o *DesignGetDocParams) WithDdoc(ddoc string) *DesignGetDocParams {
	o.SetDdoc(ddoc)
	return o
}

// SetDdoc adds the ddoc to the design get doc params
func (o *DesignGetDocParams) SetDdoc(ddoc string) {
	o.Ddoc = ddoc
}

// WithDeletedConflicts adds the deletedConflicts to the design get doc params
func (o *DesignGetDocParams) WithDeletedConflicts(deletedConflicts *bool) *DesignGetDocParams {
	o.SetDeletedConflicts(deletedConflicts)
	return o
}

// SetDeletedConflicts adds the deletedConflicts to the design get doc params
func (o *DesignGetDocParams) SetDeletedConflicts(deletedConflicts *bool) {
	o.DeletedConflicts = deletedConflicts
}

// WithLatest adds the latest to the design get doc params
func (o *DesignGetDocParams) WithLatest(latest *bool) *DesignGetDocParams {
	o.SetLatest(latest)
	return o
}

// SetLatest adds the latest to the design get doc params
func (o *DesignGetDocParams) SetLatest(latest *bool) {
	o.Latest = latest
}

// WithLocalSeq adds the localSeq to the design get doc params
func (o *DesignGetDocParams) WithLocalSeq(localSeq *bool) *DesignGetDocParams {
	o.SetLocalSeq(localSeq)
	return o
}

// SetLocalSeq adds the localSeq to the design get doc params
func (o *DesignGetDocParams) SetLocalSeq(localSeq *bool) {
	o.LocalSeq = localSeq
}

// WithMeta adds the meta to the design get doc params
func (o *DesignGetDocParams) WithMeta(meta *bool) *DesignGetDocParams {
	o.SetMeta(meta)
	return o
}

// SetMeta adds the meta to the design get doc params
func (o *DesignGetDocParams) SetMeta(meta *bool) {
	o.Meta = meta
}

// WithOpenRevs adds the openRevs to the design get doc params
func (o *DesignGetDocParams) WithOpenRevs(openRevs []string) *DesignGetDocParams {
	o.SetOpenRevs(openRevs)
	return o
}

// SetOpenRevs adds the openRevs to the design get doc params
func (o *DesignGetDocParams) SetOpenRevs(openRevs []string) {
	o.OpenRevs = openRevs
}

// WithRev adds the rev to the design get doc params
func (o *DesignGetDocParams) WithRev(rev *string) *DesignGetDocParams {
	o.SetRev(rev)
	return o
}

// SetRev adds the rev to the design get doc params
func (o *DesignGetDocParams) SetRev(rev *string) {
	o.Rev = rev
}

// WithRevs adds the revs to the design get doc params
func (o *DesignGetDocParams) WithRevs(revs *bool) *DesignGetDocParams {
	o.SetRevs(revs)
	return o
}

// SetRevs adds the revs to the design get doc params
func (o *DesignGetDocParams) SetRevs(revs *bool) {
	o.Revs = revs
}

// WithRevsInfo adds the revsInfo to the design get doc params
func (o *DesignGetDocParams) WithRevsInfo(revsInfo *bool) *DesignGetDocParams {
	o.SetRevsInfo(revsInfo)
	return o
}

// SetRevsInfo adds the revsInfo to the design get doc params
func (o *DesignGetDocParams) SetRevsInfo(revsInfo *bool) {
	o.RevsInfo = revsInfo
}

// WriteToRequest writes these params to a swagger request
func (o *DesignGetDocParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param If-None-Match
	if err := r.SetHeaderParam("If-None-Match", o.IfNoneMatch); err != nil {
		return err
	}

	if o.AttEncodingInfo != nil {

		// query param att_encoding_info
		var qrAttEncodingInfo bool
		if o.AttEncodingInfo != nil {
			qrAttEncodingInfo = *o.AttEncodingInfo
		}
		qAttEncodingInfo := swag.FormatBool(qrAttEncodingInfo)
		if qAttEncodingInfo != "" {
			if err := r.SetQueryParam("att_encoding_info", qAttEncodingInfo); err != nil {
				return err
			}
		}

	}

	if o.Attachments != nil {

		// query param attachments
		var qrAttachments bool
		if o.Attachments != nil {
			qrAttachments = *o.Attachments
		}
		qAttachments := swag.FormatBool(qrAttachments)
		if qAttachments != "" {
			if err := r.SetQueryParam("attachments", qAttachments); err != nil {
				return err
			}
		}

	}

	valuesAttsSince := o.AttsSince

	joinedAttsSince := swag.JoinByFormat(valuesAttsSince, "multi")
	// query array param atts_since
	if err := r.SetQueryParam("atts_since", joinedAttsSince...); err != nil {
		return err
	}

	if o.Conflicts != nil {

		// query param conflicts
		var qrConflicts bool
		if o.Conflicts != nil {
			qrConflicts = *o.Conflicts
		}
		qConflicts := swag.FormatBool(qrConflicts)
		if qConflicts != "" {
			if err := r.SetQueryParam("conflicts", qConflicts); err != nil {
				return err
			}
		}

	}

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	// path param ddoc
	if err := r.SetPathParam("ddoc", o.Ddoc); err != nil {
		return err
	}

	if o.DeletedConflicts != nil {

		// query param deleted_conflicts
		var qrDeletedConflicts bool
		if o.DeletedConflicts != nil {
			qrDeletedConflicts = *o.DeletedConflicts
		}
		qDeletedConflicts := swag.FormatBool(qrDeletedConflicts)
		if qDeletedConflicts != "" {
			if err := r.SetQueryParam("deleted_conflicts", qDeletedConflicts); err != nil {
				return err
			}
		}

	}

	if o.Latest != nil {

		// query param latest
		var qrLatest bool
		if o.Latest != nil {
			qrLatest = *o.Latest
		}
		qLatest := swag.FormatBool(qrLatest)
		if qLatest != "" {
			if err := r.SetQueryParam("latest", qLatest); err != nil {
				return err
			}
		}

	}

	if o.LocalSeq != nil {

		// query param local_seq
		var qrLocalSeq bool
		if o.LocalSeq != nil {
			qrLocalSeq = *o.LocalSeq
		}
		qLocalSeq := swag.FormatBool(qrLocalSeq)
		if qLocalSeq != "" {
			if err := r.SetQueryParam("local_seq", qLocalSeq); err != nil {
				return err
			}
		}

	}

	if o.Meta != nil {

		// query param meta
		var qrMeta bool
		if o.Meta != nil {
			qrMeta = *o.Meta
		}
		qMeta := swag.FormatBool(qrMeta)
		if qMeta != "" {
			if err := r.SetQueryParam("meta", qMeta); err != nil {
				return err
			}
		}

	}

	valuesOpenRevs := o.OpenRevs

	joinedOpenRevs := swag.JoinByFormat(valuesOpenRevs, "multi")
	// query array param open_revs
	if err := r.SetQueryParam("open_revs", joinedOpenRevs...); err != nil {
		return err
	}

	if o.Rev != nil {

		// query param rev
		var qrRev string
		if o.Rev != nil {
			qrRev = *o.Rev
		}
		qRev := qrRev
		if qRev != "" {
			if err := r.SetQueryParam("rev", qRev); err != nil {
				return err
			}
		}

	}

	if o.Revs != nil {

		// query param revs
		var qrRevs bool
		if o.Revs != nil {
			qrRevs = *o.Revs
		}
		qRevs := swag.FormatBool(qrRevs)
		if qRevs != "" {
			if err := r.SetQueryParam("revs", qRevs); err != nil {
				return err
			}
		}

	}

	if o.RevsInfo != nil {

		// query param revs_info
		var qrRevsInfo bool
		if o.RevsInfo != nil {
			qrRevsInfo = *o.RevsInfo
		}
		qRevsInfo := swag.FormatBool(qrRevsInfo)
		if qRevsInfo != "" {
			if err := r.SetQueryParam("revs_info", qRevsInfo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
