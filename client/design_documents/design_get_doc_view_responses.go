// Code generated by go-swagger; DO NOT EDIT.

package design_documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/RossMerr/couchdb_go/models"
)

// DesignGetDocViewReader is a Reader for the DesignGetDocView structure.
type DesignGetDocViewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DesignGetDocViewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDesignGetDocViewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewDesignGetDocViewNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewDesignGetDocViewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDesignGetDocViewUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDesignGetDocViewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDesignGetDocViewOK creates a DesignGetDocViewOK with default headers values
func NewDesignGetDocViewOK() *DesignGetDocViewOK {
	return &DesignGetDocViewOK{}
}

/*DesignGetDocViewOK handles this case with default header values.

Request completed successfully
*/
type DesignGetDocViewOK struct {
	/*Response signature
	 */
	ETag string
	/*chunked
	 */
	TransferEncoding string

	Payload *models.Pagination
}

func (o *DesignGetDocViewOK) Error() string {
	return fmt.Sprintf("[GET /{db}/_design/{ddoc}/_view/{view}][%d] designGetDocViewOK  %+v", 200, o.Payload)
}

func (o *DesignGetDocViewOK) GetPayload() *models.Pagination {
	return o.Payload
}

func (o *DesignGetDocViewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Transfer-Encoding
	o.TransferEncoding = response.GetHeader("Transfer-Encoding")

	o.Payload = new(models.Pagination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignGetDocViewNotModified creates a DesignGetDocViewNotModified with default headers values
func NewDesignGetDocViewNotModified() *DesignGetDocViewNotModified {
	return &DesignGetDocViewNotModified{}
}

/*DesignGetDocViewNotModified handles this case with default header values.

Document wasnâ€™t modified since specified revision
*/
type DesignGetDocViewNotModified struct {
}

func (o *DesignGetDocViewNotModified) Error() string {
	return fmt.Sprintf("[GET /{db}/_design/{ddoc}/_view/{view}][%d] designGetDocViewNotModified ", 304)
}

func (o *DesignGetDocViewNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDesignGetDocViewBadRequest creates a DesignGetDocViewBadRequest with default headers values
func NewDesignGetDocViewBadRequest() *DesignGetDocViewBadRequest {
	return &DesignGetDocViewBadRequest{}
}

/*DesignGetDocViewBadRequest handles this case with default header values.

Invalid request
*/
type DesignGetDocViewBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DesignGetDocViewBadRequest) Error() string {
	return fmt.Sprintf("[GET /{db}/_design/{ddoc}/_view/{view}][%d] designGetDocViewBadRequest  %+v", 400, o.Payload)
}

func (o *DesignGetDocViewBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignGetDocViewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignGetDocViewUnauthorized creates a DesignGetDocViewUnauthorized with default headers values
func NewDesignGetDocViewUnauthorized() *DesignGetDocViewUnauthorized {
	return &DesignGetDocViewUnauthorized{}
}

/*DesignGetDocViewUnauthorized handles this case with default header values.

Read permission required
*/
type DesignGetDocViewUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DesignGetDocViewUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{db}/_design/{ddoc}/_view/{view}][%d] designGetDocViewUnauthorized  %+v", 401, o.Payload)
}

func (o *DesignGetDocViewUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignGetDocViewUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignGetDocViewNotFound creates a DesignGetDocViewNotFound with default headers values
func NewDesignGetDocViewNotFound() *DesignGetDocViewNotFound {
	return &DesignGetDocViewNotFound{}
}

/*DesignGetDocViewNotFound handles this case with default header values.

Specified database, design document or view is missed
*/
type DesignGetDocViewNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DesignGetDocViewNotFound) Error() string {
	return fmt.Sprintf("[GET /{db}/_design/{ddoc}/_view/{view}][%d] designGetDocViewNotFound  %+v", 404, o.Payload)
}

func (o *DesignGetDocViewNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignGetDocViewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
