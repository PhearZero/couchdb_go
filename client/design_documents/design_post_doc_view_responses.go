// Code generated by go-swagger; DO NOT EDIT.

package design_documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/RossMerr/couchdb_go/models"
)

// DesignPostDocViewReader is a Reader for the DesignPostDocView structure.
type DesignPostDocViewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DesignPostDocViewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDesignPostDocViewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewDesignPostDocViewNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewDesignPostDocViewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDesignPostDocViewUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDesignPostDocViewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDesignPostDocViewOK creates a DesignPostDocViewOK with default headers values
func NewDesignPostDocViewOK() *DesignPostDocViewOK {
	return &DesignPostDocViewOK{}
}

/*DesignPostDocViewOK handles this case with default header values.

Request completed successfully
*/
type DesignPostDocViewOK struct {
	/*Response signature
	 */
	ETag string
	/*chunked
	 */
	TransferEncoding string

	Payload *models.Pagination
}

func (o *DesignPostDocViewOK) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designPostDocViewOK  %+v", 200, o.Payload)
}

func (o *DesignPostDocViewOK) GetPayload() *models.Pagination {
	return o.Payload
}

func (o *DesignPostDocViewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Transfer-Encoding
	o.TransferEncoding = response.GetHeader("Transfer-Encoding")

	o.Payload = new(models.Pagination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignPostDocViewNotModified creates a DesignPostDocViewNotModified with default headers values
func NewDesignPostDocViewNotModified() *DesignPostDocViewNotModified {
	return &DesignPostDocViewNotModified{}
}

/*DesignPostDocViewNotModified handles this case with default header values.

Document wasnâ€™t modified since specified revision
*/
type DesignPostDocViewNotModified struct {
}

func (o *DesignPostDocViewNotModified) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designPostDocViewNotModified ", 304)
}

func (o *DesignPostDocViewNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDesignPostDocViewBadRequest creates a DesignPostDocViewBadRequest with default headers values
func NewDesignPostDocViewBadRequest() *DesignPostDocViewBadRequest {
	return &DesignPostDocViewBadRequest{}
}

/*DesignPostDocViewBadRequest handles this case with default header values.

Invalid request
*/
type DesignPostDocViewBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DesignPostDocViewBadRequest) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designPostDocViewBadRequest  %+v", 400, o.Payload)
}

func (o *DesignPostDocViewBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignPostDocViewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignPostDocViewUnauthorized creates a DesignPostDocViewUnauthorized with default headers values
func NewDesignPostDocViewUnauthorized() *DesignPostDocViewUnauthorized {
	return &DesignPostDocViewUnauthorized{}
}

/*DesignPostDocViewUnauthorized handles this case with default header values.

Read permission required
*/
type DesignPostDocViewUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DesignPostDocViewUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designPostDocViewUnauthorized  %+v", 401, o.Payload)
}

func (o *DesignPostDocViewUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignPostDocViewUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDesignPostDocViewNotFound creates a DesignPostDocViewNotFound with default headers values
func NewDesignPostDocViewNotFound() *DesignPostDocViewNotFound {
	return &DesignPostDocViewNotFound{}
}

/*DesignPostDocViewNotFound handles this case with default header values.

Specified database, design document or view is missed
*/
type DesignPostDocViewNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DesignPostDocViewNotFound) Error() string {
	return fmt.Sprintf("[POST /{db}/_design/{ddoc}/_view/{view}][%d] designPostDocViewNotFound  %+v", 404, o.Payload)
}

func (o *DesignPostDocViewNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DesignPostDocViewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
