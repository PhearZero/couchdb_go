// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/RossMerr/couchdb-go/models"
)

// DocReader is a Reader for the Doc structure.
type DocReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DocReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDocOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewDocNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDocUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDocNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDocOK creates a DocOK with default headers values
func NewDocOK() *DocOK {
	return &DocOK{}
}

/*DocOK handles this case with default header values.

Document exists
*/
type DocOK struct {
	/*Document size
	 */
	ContentLength int64
	/*Double quoted document’s revision token
	 */
	ETag string
}

func (o *DocOK) Error() string {
	return fmt.Sprintf("[HEAD /{db}/{docid}][%d] docOK ", 200)
}

func (o *DocOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	return nil
}

// NewDocNotModified creates a DocNotModified with default headers values
func NewDocNotModified() *DocNotModified {
	return &DocNotModified{}
}

/*DocNotModified handles this case with default header values.

Document wasn’t modified since specified revision
*/
type DocNotModified struct {
}

func (o *DocNotModified) Error() string {
	return fmt.Sprintf("[HEAD /{db}/{docid}][%d] docNotModified ", 304)
}

func (o *DocNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDocUnauthorized creates a DocUnauthorized with default headers values
func NewDocUnauthorized() *DocUnauthorized {
	return &DocUnauthorized{}
}

/*DocUnauthorized handles this case with default header values.

Read privilege required
*/
type DocUnauthorized struct {
	Payload *models.Error
}

func (o *DocUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /{db}/{docid}][%d] docUnauthorized  %+v", 401, o.Payload)
}

func (o *DocUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DocUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDocNotFound creates a DocNotFound with default headers values
func NewDocNotFound() *DocNotFound {
	return &DocNotFound{}
}

/*DocNotFound handles this case with default header values.

Document not found
*/
type DocNotFound struct {
	Payload *models.Error
}

func (o *DocNotFound) Error() string {
	return fmt.Sprintf("[HEAD /{db}/{docid}][%d] docNotFound  %+v", 404, o.Payload)
}

func (o *DocNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DocNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
