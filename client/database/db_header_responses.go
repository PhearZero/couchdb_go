// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/RossMerr/couchdb_go/models"
)

// DbHeaderReader is a Reader for the DbHeader structure.
type DbHeaderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DbHeaderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDbHeaderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDbHeaderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDbHeaderOK creates a DbHeaderOK with default headers values
func NewDbHeaderOK() *DbHeaderOK {
	return &DbHeaderOK{}
}

/*DbHeaderOK handles this case with default header values.

Database exists
*/
type DbHeaderOK struct {
}

func (o *DbHeaderOK) Error() string {
	return fmt.Sprintf("[HEAD /{db}][%d] dbHeaderOK ", 200)
}

func (o *DbHeaderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDbHeaderNotFound creates a DbHeaderNotFound with default headers values
func NewDbHeaderNotFound() *DbHeaderNotFound {
	return &DbHeaderNotFound{}
}

/*DbHeaderNotFound handles this case with default header values.

Requested database not found
*/
type DbHeaderNotFound struct {
	Payload *models.Error
}

func (o *DbHeaderNotFound) Error() string {
	return fmt.Sprintf("[HEAD /{db}][%d] dbHeaderNotFound  %+v", 404, o.Payload)
}

func (o *DbHeaderNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DbHeaderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
