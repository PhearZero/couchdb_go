// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDbPutParams creates a new DbPutParams object
// with the default values initialized.
func NewDbPutParams() *DbPutParams {
	var ()
	return &DbPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDbPutParamsWithTimeout creates a new DbPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDbPutParamsWithTimeout(timeout time.Duration) *DbPutParams {
	var ()
	return &DbPutParams{

		timeout: timeout,
	}
}

// NewDbPutParamsWithContext creates a new DbPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewDbPutParamsWithContext(ctx context.Context) *DbPutParams {
	var ()
	return &DbPutParams{

		Context: ctx,
	}
}

// NewDbPutParamsWithHTTPClient creates a new DbPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDbPutParamsWithHTTPClient(client *http.Client) *DbPutParams {
	var ()
	return &DbPutParams{
		HTTPClient: client,
	}
}

/*DbPutParams contains all the parameters to send to the API endpoint
for the db put operation typically these are written to a http.Request
*/
type DbPutParams struct {

	/*Db
	  Database name

	*/
	Db string
	/*N
	  Replicas. The number of copies of the database in the cluster. The default is 3, unless overridden in the cluster config .

	*/
	N *int64
	/*Partitioned
	  Whether to create a partitioned database. Default is false.

	*/
	Partitioned *bool
	/*Q
	  Shards, aka the number of range partitions. Default is 8, unless overridden in the cluster config.

	*/
	Q *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the db put params
func (o *DbPutParams) WithTimeout(timeout time.Duration) *DbPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the db put params
func (o *DbPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the db put params
func (o *DbPutParams) WithContext(ctx context.Context) *DbPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the db put params
func (o *DbPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the db put params
func (o *DbPutParams) WithHTTPClient(client *http.Client) *DbPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the db put params
func (o *DbPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDb adds the db to the db put params
func (o *DbPutParams) WithDb(db string) *DbPutParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the db put params
func (o *DbPutParams) SetDb(db string) {
	o.Db = db
}

// WithN adds the n to the db put params
func (o *DbPutParams) WithN(n *int64) *DbPutParams {
	o.SetN(n)
	return o
}

// SetN adds the n to the db put params
func (o *DbPutParams) SetN(n *int64) {
	o.N = n
}

// WithPartitioned adds the partitioned to the db put params
func (o *DbPutParams) WithPartitioned(partitioned *bool) *DbPutParams {
	o.SetPartitioned(partitioned)
	return o
}

// SetPartitioned adds the partitioned to the db put params
func (o *DbPutParams) SetPartitioned(partitioned *bool) {
	o.Partitioned = partitioned
}

// WithQ adds the q to the db put params
func (o *DbPutParams) WithQ(q *int64) *DbPutParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the db put params
func (o *DbPutParams) SetQ(q *int64) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *DbPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	if o.N != nil {

		// query param n
		var qrN int64
		if o.N != nil {
			qrN = *o.N
		}
		qN := swag.FormatInt64(qrN)
		if qN != "" {
			if err := r.SetQueryParam("n", qN); err != nil {
				return err
			}
		}

	}

	if o.Partitioned != nil {

		// query param partitioned
		var qrPartitioned bool
		if o.Partitioned != nil {
			qrPartitioned = *o.Partitioned
		}
		qPartitioned := swag.FormatBool(qrPartitioned)
		if qPartitioned != "" {
			if err := r.SetQueryParam("partitioned", qPartitioned); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ int64
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := swag.FormatInt64(qrQ)
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
