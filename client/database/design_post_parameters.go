// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDesignPostParams creates a new DesignPostParams object
// with the default values initialized.
func NewDesignPostParams() *DesignPostParams {
	var ()
	return &DesignPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDesignPostParamsWithTimeout creates a new DesignPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDesignPostParamsWithTimeout(timeout time.Duration) *DesignPostParams {
	var ()
	return &DesignPostParams{

		timeout: timeout,
	}
}

// NewDesignPostParamsWithContext creates a new DesignPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewDesignPostParamsWithContext(ctx context.Context) *DesignPostParams {
	var ()
	return &DesignPostParams{

		Context: ctx,
	}
}

// NewDesignPostParamsWithHTTPClient creates a new DesignPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDesignPostParamsWithHTTPClient(client *http.Client) *DesignPostParams {
	var ()
	return &DesignPostParams{
		HTTPClient: client,
	}
}

/*DesignPostParams contains all the parameters to send to the API endpoint
for the design post operation typically these are written to a http.Request
*/
type DesignPostParams struct {

	/*Body*/
	Body DesignPostBody
	/*Conflicts
	  Include conflicts information in response. Ignored if include_docs isnâ€™t true. Default is false.

	*/
	Conflicts *bool
	/*Db
	  Database name

	*/
	Db string
	/*Descending
	  Return the documents in descending order by key. Default is false.

	*/
	Descending *bool
	/*EndKey
	  Alias for endkey param.

	*/
	EndKey *string
	/*EndKeyDocID
	  Alias for endkey_docid param.

	*/
	EndKeyDocID *string
	/*Endkey
	  Stop returning records when the specified key is reached. Optional.

	*/
	Endkey *string
	/*EndkeyDocid
	  Stop returning records when the specified design document ID is reached. Optional.

	*/
	EndkeyDocid *string
	/*IncludeDocs
	  Include the full content of the design documents in the return. Default is false.

	*/
	IncludeDocs *bool
	/*InclusiveEnd
	  Specifies whether the specified end key should be included in the result. Default is true.

	*/
	InclusiveEnd *bool
	/*Key
	  Return only design documents that match the specified key. Optional.

	*/
	Key *string
	/*Keys
	  Return only design documents that match the specified keys. Optional.

	*/
	Keys *string
	/*Limit
	  Limit the number of the returned design documents to the specified number. Optional.

	*/
	Limit *int64
	/*Skip
	  Skip this number of records before starting to return the results. Default is 0.

	*/
	Skip *int64
	/*StartKey
	  Alias for startkey param.

	*/
	StartKey *string
	/*StartKeyDocID
	  Alias for startkey_docid param

	*/
	StartKeyDocID *string
	/*Startkey
	  Return records starting with the specified key. Optional.

	*/
	QueryStartKey *string
	/*StartkeyDocid
	  Return records starting with the specified design document ID. Optional.

	*/
	StartkeyDocid *string
	/*UpdateSeq
	  Whether to include in the response an update_seq value indicating the sequence id of the database the view reflects. Default is false.

	*/
	UpdateSeq *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the design post params
func (o *DesignPostParams) WithTimeout(timeout time.Duration) *DesignPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the design post params
func (o *DesignPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the design post params
func (o *DesignPostParams) WithContext(ctx context.Context) *DesignPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the design post params
func (o *DesignPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the design post params
func (o *DesignPostParams) WithHTTPClient(client *http.Client) *DesignPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the design post params
func (o *DesignPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the design post params
func (o *DesignPostParams) WithBody(body DesignPostBody) *DesignPostParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the design post params
func (o *DesignPostParams) SetBody(body DesignPostBody) {
	o.Body = body
}

// WithConflicts adds the conflicts to the design post params
func (o *DesignPostParams) WithConflicts(conflicts *bool) *DesignPostParams {
	o.SetConflicts(conflicts)
	return o
}

// SetConflicts adds the conflicts to the design post params
func (o *DesignPostParams) SetConflicts(conflicts *bool) {
	o.Conflicts = conflicts
}

// WithDb adds the db to the design post params
func (o *DesignPostParams) WithDb(db string) *DesignPostParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the design post params
func (o *DesignPostParams) SetDb(db string) {
	o.Db = db
}

// WithDescending adds the descending to the design post params
func (o *DesignPostParams) WithDescending(descending *bool) *DesignPostParams {
	o.SetDescending(descending)
	return o
}

// SetDescending adds the descending to the design post params
func (o *DesignPostParams) SetDescending(descending *bool) {
	o.Descending = descending
}

// WithEndKey adds the endKey to the design post params
func (o *DesignPostParams) WithEndKey(endKey *string) *DesignPostParams {
	o.SetEndKey(endKey)
	return o
}

// SetEndKey adds the endKey to the design post params
func (o *DesignPostParams) SetEndKey(endKey *string) {
	o.EndKey = endKey
}

// WithEndKeyDocID adds the endKeyDocID to the design post params
func (o *DesignPostParams) WithEndKeyDocID(endKeyDocID *string) *DesignPostParams {
	o.SetEndKeyDocID(endKeyDocID)
	return o
}

// SetEndKeyDocID adds the endKeyDocId to the design post params
func (o *DesignPostParams) SetEndKeyDocID(endKeyDocID *string) {
	o.EndKeyDocID = endKeyDocID
}

// WithEndkey adds the endkey to the design post params
func (o *DesignPostParams) WithEndkey(endkey *string) *DesignPostParams {
	o.SetEndkey(endkey)
	return o
}

// SetEndkey adds the endkey to the design post params
func (o *DesignPostParams) SetEndkey(endkey *string) {
	o.Endkey = endkey
}

// WithEndkeyDocid adds the endkeyDocid to the design post params
func (o *DesignPostParams) WithEndkeyDocid(endkeyDocid *string) *DesignPostParams {
	o.SetEndkeyDocid(endkeyDocid)
	return o
}

// SetEndkeyDocid adds the endkeyDocid to the design post params
func (o *DesignPostParams) SetEndkeyDocid(endkeyDocid *string) {
	o.EndkeyDocid = endkeyDocid
}

// WithIncludeDocs adds the includeDocs to the design post params
func (o *DesignPostParams) WithIncludeDocs(includeDocs *bool) *DesignPostParams {
	o.SetIncludeDocs(includeDocs)
	return o
}

// SetIncludeDocs adds the includeDocs to the design post params
func (o *DesignPostParams) SetIncludeDocs(includeDocs *bool) {
	o.IncludeDocs = includeDocs
}

// WithInclusiveEnd adds the inclusiveEnd to the design post params
func (o *DesignPostParams) WithInclusiveEnd(inclusiveEnd *bool) *DesignPostParams {
	o.SetInclusiveEnd(inclusiveEnd)
	return o
}

// SetInclusiveEnd adds the inclusiveEnd to the design post params
func (o *DesignPostParams) SetInclusiveEnd(inclusiveEnd *bool) {
	o.InclusiveEnd = inclusiveEnd
}

// WithKey adds the key to the design post params
func (o *DesignPostParams) WithKey(key *string) *DesignPostParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the design post params
func (o *DesignPostParams) SetKey(key *string) {
	o.Key = key
}

// WithKeys adds the keys to the design post params
func (o *DesignPostParams) WithKeys(keys *string) *DesignPostParams {
	o.SetKeys(keys)
	return o
}

// SetKeys adds the keys to the design post params
func (o *DesignPostParams) SetKeys(keys *string) {
	o.Keys = keys
}

// WithLimit adds the limit to the design post params
func (o *DesignPostParams) WithLimit(limit *int64) *DesignPostParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the design post params
func (o *DesignPostParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSkip adds the skip to the design post params
func (o *DesignPostParams) WithSkip(skip *int64) *DesignPostParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the design post params
func (o *DesignPostParams) SetSkip(skip *int64) {
	o.Skip = skip
}

// WithStartKey adds the startKey to the design post params
func (o *DesignPostParams) WithStartKey(startKey *string) *DesignPostParams {
	o.SetStartKey(startKey)
	return o
}

// SetStartKey adds the startKey to the design post params
func (o *DesignPostParams) SetStartKey(startKey *string) {
	o.StartKey = startKey
}

// WithStartKeyDocID adds the startKeyDocID to the design post params
func (o *DesignPostParams) WithStartKeyDocID(startKeyDocID *string) *DesignPostParams {
	o.SetStartKeyDocID(startKeyDocID)
	return o
}

// SetStartKeyDocID adds the startKeyDocId to the design post params
func (o *DesignPostParams) SetStartKeyDocID(startKeyDocID *string) {
	o.StartKeyDocID = startKeyDocID
}

// WithQueryStartKey adds the startkey to the design post params
func (o *DesignPostParams) WithQueryStartKey(startkey *string) *DesignPostParams {
	o.SetQueryStartKey(startkey)
	return o
}

// SetQueryStartKey adds the startkey to the design post params
func (o *DesignPostParams) SetQueryStartKey(startkey *string) {
	o.QueryStartKey = startkey
}

// WithStartkeyDocid adds the startkeyDocid to the design post params
func (o *DesignPostParams) WithStartkeyDocid(startkeyDocid *string) *DesignPostParams {
	o.SetStartkeyDocid(startkeyDocid)
	return o
}

// SetStartkeyDocid adds the startkeyDocid to the design post params
func (o *DesignPostParams) SetStartkeyDocid(startkeyDocid *string) {
	o.StartkeyDocid = startkeyDocid
}

// WithUpdateSeq adds the updateSeq to the design post params
func (o *DesignPostParams) WithUpdateSeq(updateSeq *bool) *DesignPostParams {
	o.SetUpdateSeq(updateSeq)
	return o
}

// SetUpdateSeq adds the updateSeq to the design post params
func (o *DesignPostParams) SetUpdateSeq(updateSeq *bool) {
	o.UpdateSeq = updateSeq
}

// WriteToRequest writes these params to a swagger request
func (o *DesignPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Conflicts != nil {

		// query param conflicts
		var qrConflicts bool
		if o.Conflicts != nil {
			qrConflicts = *o.Conflicts
		}
		qConflicts := swag.FormatBool(qrConflicts)
		if qConflicts != "" {
			if err := r.SetQueryParam("conflicts", qConflicts); err != nil {
				return err
			}
		}

	}

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	if o.Descending != nil {

		// query param descending
		var qrDescending bool
		if o.Descending != nil {
			qrDescending = *o.Descending
		}
		qDescending := swag.FormatBool(qrDescending)
		if qDescending != "" {
			if err := r.SetQueryParam("descending", qDescending); err != nil {
				return err
			}
		}

	}

	if o.EndKey != nil {

		// query param end_key
		var qrEndKey string
		if o.EndKey != nil {
			qrEndKey = *o.EndKey
		}
		qEndKey := qrEndKey
		if qEndKey != "" {
			if err := r.SetQueryParam("end_key", qEndKey); err != nil {
				return err
			}
		}

	}

	if o.EndKeyDocID != nil {

		// query param end_key_doc_id
		var qrEndKeyDocID string
		if o.EndKeyDocID != nil {
			qrEndKeyDocID = *o.EndKeyDocID
		}
		qEndKeyDocID := qrEndKeyDocID
		if qEndKeyDocID != "" {
			if err := r.SetQueryParam("end_key_doc_id", qEndKeyDocID); err != nil {
				return err
			}
		}

	}

	if o.Endkey != nil {

		// query param endkey
		var qrEndkey string
		if o.Endkey != nil {
			qrEndkey = *o.Endkey
		}
		qEndkey := qrEndkey
		if qEndkey != "" {
			if err := r.SetQueryParam("endkey", qEndkey); err != nil {
				return err
			}
		}

	}

	if o.EndkeyDocid != nil {

		// query param endkey_docid
		var qrEndkeyDocid string
		if o.EndkeyDocid != nil {
			qrEndkeyDocid = *o.EndkeyDocid
		}
		qEndkeyDocid := qrEndkeyDocid
		if qEndkeyDocid != "" {
			if err := r.SetQueryParam("endkey_docid", qEndkeyDocid); err != nil {
				return err
			}
		}

	}

	if o.IncludeDocs != nil {

		// query param include_docs
		var qrIncludeDocs bool
		if o.IncludeDocs != nil {
			qrIncludeDocs = *o.IncludeDocs
		}
		qIncludeDocs := swag.FormatBool(qrIncludeDocs)
		if qIncludeDocs != "" {
			if err := r.SetQueryParam("include_docs", qIncludeDocs); err != nil {
				return err
			}
		}

	}

	if o.InclusiveEnd != nil {

		// query param inclusive_end
		var qrInclusiveEnd bool
		if o.InclusiveEnd != nil {
			qrInclusiveEnd = *o.InclusiveEnd
		}
		qInclusiveEnd := swag.FormatBool(qrInclusiveEnd)
		if qInclusiveEnd != "" {
			if err := r.SetQueryParam("inclusive_end", qInclusiveEnd); err != nil {
				return err
			}
		}

	}

	if o.Key != nil {

		// query param key
		var qrKey string
		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {
			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}

	}

	if o.Keys != nil {

		// query param keys
		var qrKeys string
		if o.Keys != nil {
			qrKeys = *o.Keys
		}
		qKeys := qrKeys
		if qKeys != "" {
			if err := r.SetQueryParam("keys", qKeys); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int64
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt64(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if o.StartKey != nil {

		// query param start_key
		var qrStartKey string
		if o.StartKey != nil {
			qrStartKey = *o.StartKey
		}
		qStartKey := qrStartKey
		if qStartKey != "" {
			if err := r.SetQueryParam("start_key", qStartKey); err != nil {
				return err
			}
		}

	}

	if o.StartKeyDocID != nil {

		// query param start_key_doc_id
		var qrStartKeyDocID string
		if o.StartKeyDocID != nil {
			qrStartKeyDocID = *o.StartKeyDocID
		}
		qStartKeyDocID := qrStartKeyDocID
		if qStartKeyDocID != "" {
			if err := r.SetQueryParam("start_key_doc_id", qStartKeyDocID); err != nil {
				return err
			}
		}

	}

	if o.QueryStartKey != nil {

		// query param startkey
		var qrStartkey string
		if o.QueryStartKey != nil {
			qrStartkey = *o.QueryStartKey
		}
		qStartkey := qrStartkey
		if qStartkey != "" {
			if err := r.SetQueryParam("startkey", qStartkey); err != nil {
				return err
			}
		}

	}

	if o.StartkeyDocid != nil {

		// query param startkey_docid
		var qrStartkeyDocid string
		if o.StartkeyDocid != nil {
			qrStartkeyDocid = *o.StartkeyDocid
		}
		qStartkeyDocid := qrStartkeyDocid
		if qStartkeyDocid != "" {
			if err := r.SetQueryParam("startkey_docid", qStartkeyDocid); err != nil {
				return err
			}
		}

	}

	if o.UpdateSeq != nil {

		// query param update_seq
		var qrUpdateSeq bool
		if o.UpdateSeq != nil {
			qrUpdateSeq = *o.UpdateSeq
		}
		qUpdateSeq := swag.FormatBool(qrUpdateSeq)
		if qUpdateSeq != "" {
			if err := r.SetQueryParam("update_seq", qUpdateSeq); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
