// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/RossMerr/couchdb_go/models"
)

// BulkGetAllReader is a Reader for the BulkGetAll structure.
type BulkGetAllReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BulkGetAllReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBulkGetAllOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBulkGetAllBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBulkGetAllUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBulkGetAllNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewBulkGetAllUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBulkGetAllOK creates a BulkGetAllOK with default headers values
func NewBulkGetAllOK() *BulkGetAllOK {
	return &BulkGetAllOK{}
}

/*BulkGetAllOK handles this case with default header values.

Request completed successfully
*/
type BulkGetAllOK struct {
	Payload *models.Results
}

func (o *BulkGetAllOK) Error() string {
	return fmt.Sprintf("[GET /{db}/_bulk_get][%d] bulkGetAllOK  %+v", 200, o.Payload)
}

func (o *BulkGetAllOK) GetPayload() *models.Results {
	return o.Payload
}

func (o *BulkGetAllOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Results)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkGetAllBadRequest creates a BulkGetAllBadRequest with default headers values
func NewBulkGetAllBadRequest() *BulkGetAllBadRequest {
	return &BulkGetAllBadRequest{}
}

/*BulkGetAllBadRequest handles this case with default header values.

The request provided invalid JSON data or invalid query parameter
*/
type BulkGetAllBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *BulkGetAllBadRequest) Error() string {
	return fmt.Sprintf("[GET /{db}/_bulk_get][%d] bulkGetAllBadRequest  %+v", 400, o.Payload)
}

func (o *BulkGetAllBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BulkGetAllBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkGetAllUnauthorized creates a BulkGetAllUnauthorized with default headers values
func NewBulkGetAllUnauthorized() *BulkGetAllUnauthorized {
	return &BulkGetAllUnauthorized{}
}

/*BulkGetAllUnauthorized handles this case with default header values.

Read permission required
*/
type BulkGetAllUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *BulkGetAllUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{db}/_bulk_get][%d] bulkGetAllUnauthorized  %+v", 401, o.Payload)
}

func (o *BulkGetAllUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BulkGetAllUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkGetAllNotFound creates a BulkGetAllNotFound with default headers values
func NewBulkGetAllNotFound() *BulkGetAllNotFound {
	return &BulkGetAllNotFound{}
}

/*BulkGetAllNotFound handles this case with default header values.

Invalid database name
*/
type BulkGetAllNotFound struct {
	Payload *models.ErrorResponse
}

func (o *BulkGetAllNotFound) Error() string {
	return fmt.Sprintf("[GET /{db}/_bulk_get][%d] bulkGetAllNotFound  %+v", 404, o.Payload)
}

func (o *BulkGetAllNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BulkGetAllNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkGetAllUnsupportedMediaType creates a BulkGetAllUnsupportedMediaType with default headers values
func NewBulkGetAllUnsupportedMediaType() *BulkGetAllUnsupportedMediaType {
	return &BulkGetAllUnsupportedMediaType{}
}

/*BulkGetAllUnsupportedMediaType handles this case with default header values.

Bad Content-Type value
*/
type BulkGetAllUnsupportedMediaType struct {
	Payload *models.ErrorResponse
}

func (o *BulkGetAllUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /{db}/_bulk_get][%d] bulkGetAllUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *BulkGetAllUnsupportedMediaType) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BulkGetAllUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
