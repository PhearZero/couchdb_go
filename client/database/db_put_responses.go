// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/RossMerr/couchdb_go/models"
)

// DbPutReader is a Reader for the DbPut structure.
type DbPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DbPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewDbPutCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewDbPutAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDbPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDbPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDbPutPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDbPutCreated creates a DbPutCreated with default headers values
func NewDbPutCreated() *DbPutCreated {
	return &DbPutCreated{}
}

/*DbPutCreated handles this case with default header values.

Database created successfully (quorum is met)
*/
type DbPutCreated struct {
	Payload *models.OK
}

func (o *DbPutCreated) Error() string {
	return fmt.Sprintf("[PUT /{db}][%d] dbPutCreated  %+v", 201, o.Payload)
}

func (o *DbPutCreated) GetPayload() *models.OK {
	return o.Payload
}

func (o *DbPutCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OK)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDbPutAccepted creates a DbPutAccepted with default headers values
func NewDbPutAccepted() *DbPutAccepted {
	return &DbPutAccepted{}
}

/*DbPutAccepted handles this case with default header values.

Accepted (at least by one node)
*/
type DbPutAccepted struct {
	Payload *models.OK
}

func (o *DbPutAccepted) Error() string {
	return fmt.Sprintf("[PUT /{db}][%d] dbPutAccepted  %+v", 202, o.Payload)
}

func (o *DbPutAccepted) GetPayload() *models.OK {
	return o.Payload
}

func (o *DbPutAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OK)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDbPutBadRequest creates a DbPutBadRequest with default headers values
func NewDbPutBadRequest() *DbPutBadRequest {
	return &DbPutBadRequest{}
}

/*DbPutBadRequest handles this case with default header values.

Invalid database name
*/
type DbPutBadRequest struct {
	Payload *models.Error
}

func (o *DbPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /{db}][%d] dbPutBadRequest  %+v", 400, o.Payload)
}

func (o *DbPutBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DbPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDbPutUnauthorized creates a DbPutUnauthorized with default headers values
func NewDbPutUnauthorized() *DbPutUnauthorized {
	return &DbPutUnauthorized{}
}

/*DbPutUnauthorized handles this case with default header values.

CouchDB Server Administrator privileges required
*/
type DbPutUnauthorized struct {
	Payload *models.Error
}

func (o *DbPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /{db}][%d] dbPutUnauthorized  %+v", 401, o.Payload)
}

func (o *DbPutUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DbPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDbPutPreconditionFailed creates a DbPutPreconditionFailed with default headers values
func NewDbPutPreconditionFailed() *DbPutPreconditionFailed {
	return &DbPutPreconditionFailed{}
}

/*DbPutPreconditionFailed handles this case with default header values.

Database already exists
*/
type DbPutPreconditionFailed struct {
	Payload *models.Error
}

func (o *DbPutPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /{db}][%d] dbPutPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DbPutPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *DbPutPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
