// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/RossMerr/couchdb_go/models"
)

// DbDeleteReader is a Reader for the DbDelete structure.
type DbDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DbDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDbDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewDbDeleteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDbDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDbDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDbDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDbDeleteOK creates a DbDeleteOK with default headers values
func NewDbDeleteOK() *DbDeleteOK {
	return &DbDeleteOK{}
}

/*DbDeleteOK handles this case with default header values.

Database removed successfully (quorum is met and database is deleted by at least one node)
*/
type DbDeleteOK struct {
	Payload *models.OK
}

func (o *DbDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] dbDeleteOK  %+v", 200, o.Payload)
}

func (o *DbDeleteOK) GetPayload() *models.OK {
	return o.Payload
}

func (o *DbDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OK)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDbDeleteAccepted creates a DbDeleteAccepted with default headers values
func NewDbDeleteAccepted() *DbDeleteAccepted {
	return &DbDeleteAccepted{}
}

/*DbDeleteAccepted handles this case with default header values.

Accepted (deleted by at least one of the nodes, quorum is not met yet)
*/
type DbDeleteAccepted struct {
	Payload *models.OK
}

func (o *DbDeleteAccepted) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] dbDeleteAccepted  %+v", 202, o.Payload)
}

func (o *DbDeleteAccepted) GetPayload() *models.OK {
	return o.Payload
}

func (o *DbDeleteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OK)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDbDeleteBadRequest creates a DbDeleteBadRequest with default headers values
func NewDbDeleteBadRequest() *DbDeleteBadRequest {
	return &DbDeleteBadRequest{}
}

/*DbDeleteBadRequest handles this case with default header values.

Invalid database name or forgotten document id by accident
*/
type DbDeleteBadRequest struct {
	Payload *models.Error
}

func (o *DbDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] dbDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *DbDeleteBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DbDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDbDeleteUnauthorized creates a DbDeleteUnauthorized with default headers values
func NewDbDeleteUnauthorized() *DbDeleteUnauthorized {
	return &DbDeleteUnauthorized{}
}

/*DbDeleteUnauthorized handles this case with default header values.

CouchDB Server Administrator privileges required
*/
type DbDeleteUnauthorized struct {
	Payload *models.Error
}

func (o *DbDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] dbDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *DbDeleteUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DbDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDbDeleteNotFound creates a DbDeleteNotFound with default headers values
func NewDbDeleteNotFound() *DbDeleteNotFound {
	return &DbDeleteNotFound{}
}

/*DbDeleteNotFound handles this case with default header values.

Database doesnâ€™t exist or invalid database name
*/
type DbDeleteNotFound struct {
	Payload *models.Error
}

func (o *DbDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] dbDeleteNotFound  %+v", 404, o.Payload)
}

func (o *DbDeleteNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DbDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
