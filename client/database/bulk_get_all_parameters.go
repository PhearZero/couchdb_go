// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/RossMerr/couchdb_go/models"
)

// NewBulkGetAllParams creates a new BulkGetAllParams object
// with the default values initialized.
func NewBulkGetAllParams() *BulkGetAllParams {
	var ()
	return &BulkGetAllParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBulkGetAllParamsWithTimeout creates a new BulkGetAllParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBulkGetAllParamsWithTimeout(timeout time.Duration) *BulkGetAllParams {
	var ()
	return &BulkGetAllParams{

		timeout: timeout,
	}
}

// NewBulkGetAllParamsWithContext creates a new BulkGetAllParams object
// with the default values initialized, and the ability to set a context for a request
func NewBulkGetAllParamsWithContext(ctx context.Context) *BulkGetAllParams {
	var ()
	return &BulkGetAllParams{

		Context: ctx,
	}
}

// NewBulkGetAllParamsWithHTTPClient creates a new BulkGetAllParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBulkGetAllParamsWithHTTPClient(client *http.Client) *BulkGetAllParams {
	var ()
	return &BulkGetAllParams{
		HTTPClient: client,
	}
}

/*BulkGetAllParams contains all the parameters to send to the API endpoint
for the bulk get all operation typically these are written to a http.Request
*/
type BulkGetAllParams struct {

	/*Body*/
	Body *models.All
	/*Db
	  Database name

	*/
	Db string
	/*Revs
	  Give the revisions history

	*/
	Revs *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the bulk get all params
func (o *BulkGetAllParams) WithTimeout(timeout time.Duration) *BulkGetAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the bulk get all params
func (o *BulkGetAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the bulk get all params
func (o *BulkGetAllParams) WithContext(ctx context.Context) *BulkGetAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the bulk get all params
func (o *BulkGetAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the bulk get all params
func (o *BulkGetAllParams) WithHTTPClient(client *http.Client) *BulkGetAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the bulk get all params
func (o *BulkGetAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the bulk get all params
func (o *BulkGetAllParams) WithBody(body *models.All) *BulkGetAllParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the bulk get all params
func (o *BulkGetAllParams) SetBody(body *models.All) {
	o.Body = body
}

// WithDb adds the db to the bulk get all params
func (o *BulkGetAllParams) WithDb(db string) *BulkGetAllParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the bulk get all params
func (o *BulkGetAllParams) SetDb(db string) {
	o.Db = db
}

// WithRevs adds the revs to the bulk get all params
func (o *BulkGetAllParams) WithRevs(revs *bool) *BulkGetAllParams {
	o.SetRevs(revs)
	return o
}

// SetRevs adds the revs to the bulk get all params
func (o *BulkGetAllParams) SetRevs(revs *bool) {
	o.Revs = revs
}

// WriteToRequest writes these params to a swagger request
func (o *BulkGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	if o.Revs != nil {

		// query param revs
		var qrRevs bool
		if o.Revs != nil {
			qrRevs = *o.Revs
		}
		qRevs := swag.FormatBool(qrRevs)
		if qRevs != "" {
			if err := r.SetQueryParam("revs", qRevs); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
