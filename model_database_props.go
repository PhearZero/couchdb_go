/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the DatabaseProps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseProps{}

// DatabaseProps struct for DatabaseProps
type DatabaseProps struct {
	// If present and true, this indicates that the database is partitioned.
	Partitioned *bool `json:"partitioned,omitempty"`
}

// NewDatabaseProps instantiates a new DatabaseProps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseProps() *DatabaseProps {
	this := DatabaseProps{}
	return &this
}

// NewDatabasePropsWithDefaults instantiates a new DatabaseProps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabasePropsWithDefaults() *DatabaseProps {
	this := DatabaseProps{}
	return &this
}

// GetPartitioned returns the Partitioned field value if set, zero value otherwise.
func (o *DatabaseProps) GetPartitioned() bool {
	if o == nil || IsNil(o.Partitioned) {
		var ret bool
		return ret
	}
	return *o.Partitioned
}

// GetPartitionedOk returns a tuple with the Partitioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseProps) GetPartitionedOk() (*bool, bool) {
	if o == nil || IsNil(o.Partitioned) {
		return nil, false
	}
	return o.Partitioned, true
}

// HasPartitioned returns a boolean if a field has been set.
func (o *DatabaseProps) HasPartitioned() bool {
	if o != nil && !IsNil(o.Partitioned) {
		return true
	}

	return false
}

// SetPartitioned gets a reference to the given bool and assigns it to the Partitioned field.
func (o *DatabaseProps) SetPartitioned(v bool) {
	o.Partitioned = &v
}

func (o DatabaseProps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseProps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Partitioned) {
		toSerialize["partitioned"] = o.Partitioned
	}
	return toSerialize, nil
}

type NullableDatabaseProps struct {
	value *DatabaseProps
	isSet bool
}

func (v NullableDatabaseProps) Get() *DatabaseProps {
	return v.value
}

func (v *NullableDatabaseProps) Set(val *DatabaseProps) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseProps) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseProps(val *DatabaseProps) *NullableDatabaseProps {
	return &NullableDatabaseProps{value: val, isSet: true}
}

func (v NullableDatabaseProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


