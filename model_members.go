/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Members type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Members{}

// Members they can read all types of documents from the DB, and they can write (and edit) documents to the DB except for design documents.
type Members struct {
	// List of CouchDB user names
	Name []string `json:"name,omitempty"`
	// List of users roles
	Roles []string `json:"roles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Members Members

// NewMembers instantiates a new Members object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembers() *Members {
	this := Members{}
	return &this
}

// NewMembersWithDefaults instantiates a new Members object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembersWithDefaults() *Members {
	this := Members{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Members) GetName() []string {
	if o == nil || IsNil(o.Name) {
		var ret []string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Members) GetNameOk() ([]string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Members) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *Members) SetName(v []string) {
	o.Name = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Members) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Members) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Members) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Members) SetRoles(v []string) {
	o.Roles = v
}

func (o Members) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Members) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Members) UnmarshalJSON(bytes []byte) (err error) {
	varMembers := _Members{}

	if err = json.Unmarshal(bytes, &varMembers); err == nil {
		*o = Members(varMembers)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMembers struct {
	value *Members
	isSet bool
}

func (v NullableMembers) Get() *Members {
	return v.value
}

func (v *NullableMembers) Set(val *Members) {
	v.value = val
	v.isSet = true
}

func (v NullableMembers) IsSet() bool {
	return v.isSet
}

func (v *NullableMembers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembers(val *Members) *NullableMembers {
	return &NullableMembers{value: val, isSet: true}
}

func (v NullableMembers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


