/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Keys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Keys{}

// Keys struct for Keys
type Keys struct {
	Keys []string `json:"keys,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Keys Keys

// NewKeys instantiates a new Keys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeys() *Keys {
	this := Keys{}
	return &this
}

// NewKeysWithDefaults instantiates a new Keys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeysWithDefaults() *Keys {
	this := Keys{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *Keys) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keys) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *Keys) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *Keys) SetKeys(v []string) {
	o.Keys = v
}

func (o Keys) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Keys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Keys) UnmarshalJSON(bytes []byte) (err error) {
	varKeys := _Keys{}

	if err = json.Unmarshal(bytes, &varKeys); err == nil {
		*o = Keys(varKeys)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "keys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeys struct {
	value *Keys
	isSet bool
}

func (v NullableKeys) Get() *Keys {
	return v.value
}

func (v *NullableKeys) Set(val *Keys) {
	v.value = val
	v.isSet = true
}

func (v NullableKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeys(val *Keys) *NullableKeys {
	return &NullableKeys{value: val, isSet: true}
}

func (v NullableKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


