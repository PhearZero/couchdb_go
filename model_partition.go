/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Partition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Partition{}

// Partition struct for Partition
type Partition struct {
	DbName *string `json:"db_name,omitempty"`
	DocCount *int32 `json:"doc_count,omitempty"`
	DocDelCount *int32 `json:"doc_del_count,omitempty"`
	Partition *string `json:"partition,omitempty"`
	Sizes *PartitionSizes `json:"sizes,omitempty"`
}

// NewPartition instantiates a new Partition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartition() *Partition {
	this := Partition{}
	return &this
}

// NewPartitionWithDefaults instantiates a new Partition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionWithDefaults() *Partition {
	this := Partition{}
	return &this
}

// GetDbName returns the DbName field value if set, zero value otherwise.
func (o *Partition) GetDbName() string {
	if o == nil || IsNil(o.DbName) {
		var ret string
		return ret
	}
	return *o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetDbNameOk() (*string, bool) {
	if o == nil || IsNil(o.DbName) {
		return nil, false
	}
	return o.DbName, true
}

// HasDbName returns a boolean if a field has been set.
func (o *Partition) HasDbName() bool {
	if o != nil && !IsNil(o.DbName) {
		return true
	}

	return false
}

// SetDbName gets a reference to the given string and assigns it to the DbName field.
func (o *Partition) SetDbName(v string) {
	o.DbName = &v
}

// GetDocCount returns the DocCount field value if set, zero value otherwise.
func (o *Partition) GetDocCount() int32 {
	if o == nil || IsNil(o.DocCount) {
		var ret int32
		return ret
	}
	return *o.DocCount
}

// GetDocCountOk returns a tuple with the DocCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetDocCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DocCount) {
		return nil, false
	}
	return o.DocCount, true
}

// HasDocCount returns a boolean if a field has been set.
func (o *Partition) HasDocCount() bool {
	if o != nil && !IsNil(o.DocCount) {
		return true
	}

	return false
}

// SetDocCount gets a reference to the given int32 and assigns it to the DocCount field.
func (o *Partition) SetDocCount(v int32) {
	o.DocCount = &v
}

// GetDocDelCount returns the DocDelCount field value if set, zero value otherwise.
func (o *Partition) GetDocDelCount() int32 {
	if o == nil || IsNil(o.DocDelCount) {
		var ret int32
		return ret
	}
	return *o.DocDelCount
}

// GetDocDelCountOk returns a tuple with the DocDelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetDocDelCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DocDelCount) {
		return nil, false
	}
	return o.DocDelCount, true
}

// HasDocDelCount returns a boolean if a field has been set.
func (o *Partition) HasDocDelCount() bool {
	if o != nil && !IsNil(o.DocDelCount) {
		return true
	}

	return false
}

// SetDocDelCount gets a reference to the given int32 and assigns it to the DocDelCount field.
func (o *Partition) SetDocDelCount(v int32) {
	o.DocDelCount = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *Partition) GetPartition() string {
	if o == nil || IsNil(o.Partition) {
		var ret string
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetPartitionOk() (*string, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *Partition) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given string and assigns it to the Partition field.
func (o *Partition) SetPartition(v string) {
	o.Partition = &v
}

// GetSizes returns the Sizes field value if set, zero value otherwise.
func (o *Partition) GetSizes() PartitionSizes {
	if o == nil || IsNil(o.Sizes) {
		var ret PartitionSizes
		return ret
	}
	return *o.Sizes
}

// GetSizesOk returns a tuple with the Sizes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetSizesOk() (*PartitionSizes, bool) {
	if o == nil || IsNil(o.Sizes) {
		return nil, false
	}
	return o.Sizes, true
}

// HasSizes returns a boolean if a field has been set.
func (o *Partition) HasSizes() bool {
	if o != nil && !IsNil(o.Sizes) {
		return true
	}

	return false
}

// SetSizes gets a reference to the given PartitionSizes and assigns it to the Sizes field.
func (o *Partition) SetSizes(v PartitionSizes) {
	o.Sizes = &v
}

func (o Partition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Partition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DbName) {
		toSerialize["db_name"] = o.DbName
	}
	if !IsNil(o.DocCount) {
		toSerialize["doc_count"] = o.DocCount
	}
	if !IsNil(o.DocDelCount) {
		toSerialize["doc_del_count"] = o.DocDelCount
	}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !IsNil(o.Sizes) {
		toSerialize["sizes"] = o.Sizes
	}
	return toSerialize, nil
}

type NullablePartition struct {
	value *Partition
	isSet bool
}

func (v NullablePartition) Get() *Partition {
	return v.value
}

func (v *NullablePartition) Set(val *Partition) {
	v.value = val
	v.isSet = true
}

func (v NullablePartition) IsSet() bool {
	return v.isSet
}

func (v *NullablePartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartition(val *Partition) *NullablePartition {
	return &NullablePartition{value: val, isSet: true}
}

func (v NullablePartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


