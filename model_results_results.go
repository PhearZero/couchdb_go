/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the ResultsResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultsResults{}

// ResultsResults struct for ResultsResults
type ResultsResults struct {
	Id *string `json:"id,omitempty"`
	Docs []ResultsDocs `json:"docs,omitempty"`
}

// NewResultsResults instantiates a new ResultsResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultsResults() *ResultsResults {
	this := ResultsResults{}
	return &this
}

// NewResultsResultsWithDefaults instantiates a new ResultsResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultsResultsWithDefaults() *ResultsResults {
	this := ResultsResults{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResultsResults) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsResults) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResultsResults) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResultsResults) SetId(v string) {
	o.Id = &v
}

// GetDocs returns the Docs field value if set, zero value otherwise.
func (o *ResultsResults) GetDocs() []ResultsDocs {
	if o == nil || IsNil(o.Docs) {
		var ret []ResultsDocs
		return ret
	}
	return o.Docs
}

// GetDocsOk returns a tuple with the Docs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsResults) GetDocsOk() ([]ResultsDocs, bool) {
	if o == nil || IsNil(o.Docs) {
		return nil, false
	}
	return o.Docs, true
}

// HasDocs returns a boolean if a field has been set.
func (o *ResultsResults) HasDocs() bool {
	if o != nil && !IsNil(o.Docs) {
		return true
	}

	return false
}

// SetDocs gets a reference to the given []ResultsDocs and assigns it to the Docs field.
func (o *ResultsResults) SetDocs(v []ResultsDocs) {
	o.Docs = v
}

func (o ResultsResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultsResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Docs) {
		toSerialize["docs"] = o.Docs
	}
	return toSerialize, nil
}

type NullableResultsResults struct {
	value *ResultsResults
	isSet bool
}

func (v NullableResultsResults) Get() *ResultsResults {
	return v.value
}

func (v *NullableResultsResults) Set(val *ResultsResults) {
	v.value = val
	v.isSet = true
}

func (v NullableResultsResults) IsSet() bool {
	return v.isSet
}

func (v *NullableResultsResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultsResults(val *ResultsResults) *NullableResultsResults {
	return &NullableResultsResults{value: val, isSet: true}
}

func (v NullableResultsResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultsResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


