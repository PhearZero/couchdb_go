/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the ReplicateCreateTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicateCreateTargetParams{}

// ReplicateCreateTargetParams struct for ReplicateCreateTargetParams
type ReplicateCreateTargetParams struct {
	Partitioned *bool `json:"partitioned,omitempty"`
}

// NewReplicateCreateTargetParams instantiates a new ReplicateCreateTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicateCreateTargetParams() *ReplicateCreateTargetParams {
	this := ReplicateCreateTargetParams{}
	return &this
}

// NewReplicateCreateTargetParamsWithDefaults instantiates a new ReplicateCreateTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicateCreateTargetParamsWithDefaults() *ReplicateCreateTargetParams {
	this := ReplicateCreateTargetParams{}
	return &this
}

// GetPartitioned returns the Partitioned field value if set, zero value otherwise.
func (o *ReplicateCreateTargetParams) GetPartitioned() bool {
	if o == nil || IsNil(o.Partitioned) {
		var ret bool
		return ret
	}
	return *o.Partitioned
}

// GetPartitionedOk returns a tuple with the Partitioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicateCreateTargetParams) GetPartitionedOk() (*bool, bool) {
	if o == nil || IsNil(o.Partitioned) {
		return nil, false
	}
	return o.Partitioned, true
}

// HasPartitioned returns a boolean if a field has been set.
func (o *ReplicateCreateTargetParams) HasPartitioned() bool {
	if o != nil && !IsNil(o.Partitioned) {
		return true
	}

	return false
}

// SetPartitioned gets a reference to the given bool and assigns it to the Partitioned field.
func (o *ReplicateCreateTargetParams) SetPartitioned(v bool) {
	o.Partitioned = &v
}

func (o ReplicateCreateTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicateCreateTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Partitioned) {
		toSerialize["partitioned"] = o.Partitioned
	}
	return toSerialize, nil
}

type NullableReplicateCreateTargetParams struct {
	value *ReplicateCreateTargetParams
	isSet bool
}

func (v NullableReplicateCreateTargetParams) Get() *ReplicateCreateTargetParams {
	return v.value
}

func (v *NullableReplicateCreateTargetParams) Set(val *ReplicateCreateTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicateCreateTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicateCreateTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicateCreateTargetParams(val *ReplicateCreateTargetParams) *NullableReplicateCreateTargetParams {
	return &NullableReplicateCreateTargetParams{value: val, isSet: true}
}

func (v NullableReplicateCreateTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicateCreateTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


