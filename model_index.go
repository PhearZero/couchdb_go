/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Index type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Index{}

// Index struct for Index
type Index struct {
	// Name of the design document in which the index will be created. By default, each index will be created in its own design document. Indexes can be grouped into design documents for efficiency. However, a change to one index in a design document will invalidate all other indexes in the same document (similar to views). Optional
	Ddoc *string `json:"ddoc,omitempty"`
	// Name of the index. If no name is provided, a name will be generated automatically. Optional
	Name *string `json:"name,omitempty"`
	// Defaults to json. Geospatial indexes will be supported in the future. Optional Text indexes are supported via a third party library Optional
	Type *string `json:"type,omitempty"`
	// Determines whether a JSON index is partitioned or global. The default value of partitioned is the partitioned property of the database. To create a global index on a partitioned database, specify false for the \"partitioned\" field. If you specify true for the \"partitioned\" field on an unpartitioned database, an error occurs.
	Partitioned *bool `json:"partitioned,omitempty"`
	Index *IndexDefinitionsDefField `json:"index,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Index Index

// NewIndex instantiates a new Index object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndex() *Index {
	this := Index{}
	var type_ string = "json"
	this.Type = &type_
	return &this
}

// NewIndexWithDefaults instantiates a new Index object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexWithDefaults() *Index {
	this := Index{}
	var type_ string = "json"
	this.Type = &type_
	return &this
}

// GetDdoc returns the Ddoc field value if set, zero value otherwise.
func (o *Index) GetDdoc() string {
	if o == nil || IsNil(o.Ddoc) {
		var ret string
		return ret
	}
	return *o.Ddoc
}

// GetDdocOk returns a tuple with the Ddoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetDdocOk() (*string, bool) {
	if o == nil || IsNil(o.Ddoc) {
		return nil, false
	}
	return o.Ddoc, true
}

// HasDdoc returns a boolean if a field has been set.
func (o *Index) HasDdoc() bool {
	if o != nil && !IsNil(o.Ddoc) {
		return true
	}

	return false
}

// SetDdoc gets a reference to the given string and assigns it to the Ddoc field.
func (o *Index) SetDdoc(v string) {
	o.Ddoc = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Index) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Index) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Index) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Index) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Index) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Index) SetType(v string) {
	o.Type = &v
}

// GetPartitioned returns the Partitioned field value if set, zero value otherwise.
func (o *Index) GetPartitioned() bool {
	if o == nil || IsNil(o.Partitioned) {
		var ret bool
		return ret
	}
	return *o.Partitioned
}

// GetPartitionedOk returns a tuple with the Partitioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetPartitionedOk() (*bool, bool) {
	if o == nil || IsNil(o.Partitioned) {
		return nil, false
	}
	return o.Partitioned, true
}

// HasPartitioned returns a boolean if a field has been set.
func (o *Index) HasPartitioned() bool {
	if o != nil && !IsNil(o.Partitioned) {
		return true
	}

	return false
}

// SetPartitioned gets a reference to the given bool and assigns it to the Partitioned field.
func (o *Index) SetPartitioned(v bool) {
	o.Partitioned = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *Index) GetIndex() IndexDefinitionsDefField {
	if o == nil || IsNil(o.Index) {
		var ret IndexDefinitionsDefField
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetIndexOk() (*IndexDefinitionsDefField, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *Index) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given IndexDefinitionsDefField and assigns it to the Index field.
func (o *Index) SetIndex(v IndexDefinitionsDefField) {
	o.Index = &v
}

func (o Index) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Index) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ddoc) {
		toSerialize["ddoc"] = o.Ddoc
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Partitioned) {
		toSerialize["partitioned"] = o.Partitioned
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Index) UnmarshalJSON(bytes []byte) (err error) {
	varIndex := _Index{}

	if err = json.Unmarshal(bytes, &varIndex); err == nil {
		*o = Index(varIndex)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ddoc")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "partitioned")
		delete(additionalProperties, "index")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIndex struct {
	value *Index
	isSet bool
}

func (v NullableIndex) Get() *Index {
	return v.value
}

func (v *NullableIndex) Set(val *Index) {
	v.value = val
	v.isSet = true
}

func (v NullableIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndex(val *Index) *NullableIndex {
	return &NullableIndex{value: val, isSet: true}
}

func (v NullableIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


