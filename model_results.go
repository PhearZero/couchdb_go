/*
CouchDB API

*Note* This is not a definitive implementation of the CouchDB API, it's missing a lot of the endpoints for server/database managment and everything for attachments all COPY operations and probably a few other parts.  It also targets golang, as such the '#/definitions/Document' is intentionally left empty to generate a go `interface`, which you can then cast to a `map[string]interface{}`. 

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchdb_go

import (
	"encoding/json"
)

// checks if the Results type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Results{}

// Results struct for Results
type Results struct {
	Results []ResultsResults `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Results Results

// NewResults instantiates a new Results object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResults() *Results {
	this := Results{}
	return &this
}

// NewResultsWithDefaults instantiates a new Results object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultsWithDefaults() *Results {
	this := Results{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *Results) GetResults() []ResultsResults {
	if o == nil || IsNil(o.Results) {
		var ret []ResultsResults
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Results) GetResultsOk() ([]ResultsResults, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *Results) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []ResultsResults and assigns it to the Results field.
func (o *Results) SetResults(v []ResultsResults) {
	o.Results = v
}

func (o Results) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Results) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Results) UnmarshalJSON(bytes []byte) (err error) {
	varResults := _Results{}

	if err = json.Unmarshal(bytes, &varResults); err == nil {
		*o = Results(varResults)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResults struct {
	value *Results
	isSet bool
}

func (v NullableResults) Get() *Results {
	return v.value
}

func (v *NullableResults) Set(val *Results) {
	v.value = val
	v.isSet = true
}

func (v NullableResults) IsSet() bool {
	return v.isSet
}

func (v *NullableResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResults(val *Results) *NullableResults {
	return &NullableResults{value: val, isSet: true}
}

func (v NullableResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


